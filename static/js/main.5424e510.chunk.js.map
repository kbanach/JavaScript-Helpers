{"version":3,"sources":["components/Settings/Settings.actions.ts","components/Settings/Settings.reducers.ts","components/Presets/Presets.component.tsx","components/Form/HorizontalInput.tsx","components/Presets/Presets.container.ts","components/Settings/Settings.component.tsx","components/Settings/Settings.container.ts","components/LogVars/LogVars.component.tsx","components/LogVars/LogVars.actions.ts","components/LogVars/LogVars.container.ts","components/Comment/Comment.actions.ts","components/Comment/Comment.container.ts","components/Comment/Comment.component.tsx","components/Output/helpers.ts","components/Output/Output.container.ts","components/Output/Output.component.tsx","App.tsx","components/LogVars/LogVars.reducers.ts","store/rootReducer.ts","components/Comment/Comment.reducers.ts","index.tsx","store/localStorage.js"],"names":["SettingsActions","PresetNames","settingsInitialState","currentPreset","DEFAULT","showAdvancedSettings","values","presetFullName","filler","lineLength","lineStart","lineEnd","charEscaper","variableConcatenateChar","variableWrapperCodePrefix","variableWrapperCodePostfix","generalPrefix","generalPostfix","presetsValues","BROWSER","NODEJS","REACT_RENDER","CUSTOM","getPreset","presetName","INPUT_TYPE","connect","state","activePreset","settings","dispatch","changePreset","preset","type","loadSettingsPreset","props","Row","Col","className","ButtonGroup","size","Object","map","key","Button","variant","onClick","HorizontalInput","label","value","INPUT","onChange","errorMsg","rows","Form","Group","as","Label","column","sm","Control","e","preventDefault","target","isInvalid","TEXTAREA","Feedback","SettingsComponent","changeLineLength","lineLenStr","parseInt","isNaN","this","resetForm","hideAdvanced","showAdvanced","prefix","postfix","React","Component","newSettingsValues","updateSettings","LogVarsComponent","resetVariables","rawVars","bracketsError","consLogGenActions","getClosingBracket","closing","isClosingBracket","val","test","vars","separator","varsList","currentVar","bracketsQueue","char","length","push","lastOpenedBracket","pop","trim","setVars","CommentActions","comment","setComment","resetComment","newValue","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","genPrefix","genPostfix","parsedVarsLines","v","variable","parseVar","outputText","split","l","join","parseComment","filter","Boolean","k","App","Container","varsInitialState","reducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5424e510.chunk.js","sourcesContent":["import { PresetNames } from \"./Settings.reducers\";\nimport { Settings } from \"./Settings.interface\";\n\nexport const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset: PresetNames) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(newSettingsValues: Partial<Settings>) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    newSettingsValues,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","import { SettingsActions } from './Settings.actions';\nimport { AnyAction } from 'redux';\nimport { Settings } from './Settings.interface';\n\nexport enum PresetNames {\n  BROWSER = 'BROWSER',\n  NODEJS = 'NODEJS',\n  REACT_RENDER = 'REACT_RENDER',\n  DEFAULT = 'DEFAULT',\n  CUSTOM = 'CUSTOM',\n};\n\nconst settingsInitialState = {\n  currentPreset: PresetNames.DEFAULT,\n  showAdvancedSettings: false,\n  values: {\n    presetFullName: 'Default',\n    filler: '*',\n    lineLength: 60,\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n};\n\nexport interface SettingsState {\n  currentPreset: PresetNames;\n  showAdvancedSettings: boolean;\n  values: Settings;\n};\n\n\nconst presetsValues: { \n  [key in PresetNames]: Partial<Settings> \n} = {\n  BROWSER: {\n    presetFullName: 'Browser',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n  NODEJS: {\n    presetFullName: 'NodeJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'util.inspect(',\n    variableWrapperCodePostfix: ', false, 5)',\n    generalPrefix: \"const util = require('util');\",\n    generalPostfix: '',\n  },\n  REACT_RENDER: {\n    presetFullName: 'React render() log',\n    lineStart: '',\n    lineEnd: '<br />',\n    charEscaper: '',\n    variableConcatenateChar: '',\n    variableWrapperCodePrefix: '{JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\n    generalPrefix: '<pre>',\n    generalPostfix: '</pre>',\n  },\n  DEFAULT: {\n    ...settingsInitialState.values,\n  },\n  CUSTOM: {\n    presetFullName: 'Custom',\n  },\n};\n\nexport function getPreset(presetName: PresetNames) {\n  return presetsValues[presetName];\n}\n\nexport function settings(state = settingsInitialState, action: AnyAction): SettingsState {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        currentPreset: action.preset,\n        values: {\n          ...state.values,\n          ...getPreset(action.preset),\n        },\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        currentPreset: PresetNames.CUSTOM,\n        values: {\n          ...state.values,\n          ...getPreset(PresetNames.CUSTOM),\n          ...action.newSettingsValues,\n        },\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { PresetsComponentProps } from './Presets.interface';\nimport { PresetNames, getPreset } from '../Settings/Settings.reducers';\n\nexport const PresetsComponent: React.FC<PresetsComponentProps> = (props) => (\n  <Row>\n    <Col className=\"d-flex flex-column\">\n      <h3>Presets</h3>\n      <ButtonGroup size=\"sm\" className=\"mt-3\">\n        {Object.values(PresetNames).map((key) => (\n          <Button\n            key={key}\n            variant={(props.activePreset === key) ? 'primary' : 'outline-primary'}\n            onClick={() => props.changePreset(key)}\n          >\n            {getPreset(key).presetFullName}\n          </Button>\n        ))}\n      </ButtonGroup>\n      <br />\n    </Col>\n  </Row>\n);\n\n\n","/**\n * This file is a bit retarded. It can not be converted to *.tsx file, \n * because of complains of Form.Control (from react-bootstrap) that does not\n * know how to handle spreaded properties.\n * \n * TODO: This helper component should be rewritten from scratch. \n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport enum INPUT_TYPE {\n  INPUT = 'input',\n  TEXTAREA = 'textarea',\n};\n\ninterface HorizontalInputProps {\n  label: string;\n  value: string;\n  type?: INPUT_TYPE;\n  errorMsg?: string;\n  rows?: number;\n  onChange: (val: string) => void;\n}\n\nconst HorizontalInput: React.FC<HorizontalInputProps> = ({\n  label,\n  value,\n  type = INPUT_TYPE.INPUT,\n  onChange,\n  errorMsg,\n  rows,\n}) => {\n  return (\n    <Form.Group as={Row} className=\"align-items-center\">\n      <Form.Label column sm=\"3\">\n        {label}\n      </Form.Label>\n      <Col sm=\"9\">\n        {(type === INPUT_TYPE.INPUT) && (\n          <Form.Control\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? '' as string);\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n          />\n        )}\n        {(type === INPUT_TYPE.TEXTAREA) && (\n          <Form.Control\n            as='textarea'\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? '' as string);\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n            rows={rows}\n          />\n        )}\n        {errorMsg && (\n          <Form.Control.Feedback type=\"invalid\">\n            {errorMsg}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n};\n\nHorizontalInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(Object.values(INPUT_TYPE)),\n};\n\nexport default HorizontalInput;\n","import { connect } from \"react-redux\";\nimport { loadSettingsPreset } from \"../Settings/Settings.actions\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { PresetNames } from \"../Settings/Settings.reducers\";\nimport { PresetsComponent } from \"./Presets.component\";\n\nconst mapStateToProps = (state: RootState) => ({\n  activePreset: state.settings.currentPreset,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changePreset: (preset: PresetNames) => {\n    dispatch(loadSettingsPreset(preset));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PresetsComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Settings } from './Settings.interface';\nimport HorizontalInput from '../Form/HorizontalInput';\n\nexport class SettingsComponent extends React.Component<any, any> {\n  changeLineLength = (lineLenStr: string) => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    this.props.onChange({\n      lineLength,\n    });\n  };\n\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={this.props.resetForm}\n              >\n                Reset settings\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Char to use as filler\"\n            onChange={(filler: Settings['filler']) => {\n              this.props.onChange({ filler });\n            }}\n            value={this.props.filler}\n          />\n\n          <HorizontalInput\n            label=\"Line length\"\n            onChange={this.changeLineLength}\n            value={this.props.lineLength}\n          />\n\n          <Row>\n            <Col>\n              <h3>Advanced settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              {this.props.showAdvancedSettings ? (\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  onClick={this.props.hideAdvanced}\n                >\n                  Hide advanced settings\n                </Button>\n              ) : (\n                  <Button\n                    variant=\"outline-primary\"\n                    size=\"sm\"\n                    onClick={this.props.showAdvanced}\n                  >\n                    Show advanced settings\n                  </Button>\n                )}\n            </Col>\n          </Row>\n\n          {this.props.showAdvancedSettings && (\n            <div>\n              <HorizontalInput\n                label=\"General prefix\"\n                onChange={(generalPrefix: Settings['generalPrefix']) => {\n                  this.props.onChange({ generalPrefix });\n                }}\n                value={this.props.generalPrefix}\n              />\n              <HorizontalInput\n                label=\"General postfix\"\n                onChange={(generalPostfix: Settings['generalPostfix']) => {\n                  this.props.onChange({ generalPostfix });\n                }}\n                value={this.props.generalPostfix}\n              />\n              <HorizontalInput\n                label=\"Line start\"\n                onChange={(lineStart: Settings['lineStart']) => {\n                  this.props.onChange({ lineStart });\n                }}\n                value={this.props.lineStart}\n              />\n              <HorizontalInput\n                label=\"Line end\"\n                onChange={(lineEnd: Settings['lineEnd']) => {\n                  this.props.onChange({ lineEnd });\n                }}\n                value={this.props.lineEnd}\n              />\n              <HorizontalInput\n                label=\"Char escaper\"\n                onChange={(charEscaper: Settings['charEscaper']) => {\n                  this.props.onChange({ charEscaper });\n                }}\n                value={this.props.charEscaper}\n              />\n              <HorizontalInput\n                label=\"Concatenate variable in log char\"\n                onChange={(variableConcatenateChar: Settings['variableConcatenateChar']) => {\n                  this.props.onChange({ variableConcatenateChar });\n                }}\n                value={this.props.variableConcatenateChar}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper prefix\"\n                onChange={(prefix: Settings['variableWrapperCodePrefix']) => {\n                  this.props.onChange({ variableWrapperCodePrefix: prefix });\n                }}\n                value={this.props.variableWrapperCodePrefix}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper postfix\"\n                onChange={(postfix: Settings['variableWrapperCodePostfix']) => {\n                  this.props.onChange({ variableWrapperCodePostfix: postfix });\n                }}\n                value={this.props.variableWrapperCodePostfix}\n              />\n            </div>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { SettingsComponent } from './Settings.component';\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { Settings } from \"./Settings.interface\";\nimport { updateSettings, resetSettings, showAdvancedSettings, hideAdvancedSettings } from \"./Settings.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  showAdvancedSettings: state.settings.showAdvancedSettings,\n  ...state.settings.values,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (newSettingsValues: Partial<Settings>) => {\n    dispatch(updateSettings(newSettingsValues));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsComponent);","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { LogVarsProps } from './LogVars.interface';\nimport { VarsState } from './LogVars.reducers';\nimport HorizontalInput from '../Form/HorizontalInput';\n\nexport class LogVarsComponent extends React.Component<LogVarsProps, any> {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Variables</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={() => {\n                  this.props.resetVariables();\n                }}\n              >\n                Reset variables\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Variable names to log\"\n            onChange={(rawVars: VarsState['rawVars']) => {\n              this.props.onChange(rawVars);\n            }}\n            value={this.props.rawVars}\n            errorMsg={this.props.bracketsError}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import { VarsState } from \"./LogVars.reducers\";\n\nexport const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  UPDATE_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\ntype OpeningBrackets = '(' | '{' | '[';\ntype ClosingBrackets = ')' | '}' | ']';\n\nconst getClosingBracket = (closing: OpeningBrackets): ClosingBrackets | undefined => {\n  switch (closing) {\n    case '(':\n      return ')' as ClosingBrackets;\n    case '{':\n      return '}' as ClosingBrackets;\n    case '[':\n      return ']' as ClosingBrackets;\n  }\n}\n\nconst isOpeningBracket = (val: any): val is OpeningBrackets => {\n  const openingBrackets: RegExp = /[({[]/;\n  return openingBrackets.test(val)\n}\n\nconst isClosingBracket = (val: any): val is ClosingBrackets => {\n  const closingBrackets: RegExp = /[)}\\]]/;\n  return closingBrackets.test(val)\n}\n\nexport function setVars(rawVars: VarsState['rawVars']) {\n  const separator: RegExp = /[ ,;]/;\n  const varsList: string[] = [];\n\n  let currentVar: string = '';\n  let bracketsQueue: OpeningBrackets[] = [];\n  let bracketsError: string = '';\n\n  for (let char of rawVars) {\n\n    if (bracketsError.length > 0) {\n      break;\n    }\n\n    // current char is not a separator OR any bracket is not opened\n    if (!separator.test(char) || bracketsQueue.length > 0) {\n      currentVar += char;\n\n      if (isOpeningBracket(char)) {\n        bracketsQueue.push(char);\n      }\n\n      if (isClosingBracket(char)) {\n        const lastOpenedBracket = bracketsQueue[bracketsQueue.length - 1];\n\n        if (bracketsQueue.length && char === getClosingBracket(lastOpenedBracket)) {\n          bracketsQueue.pop();\n        } else {\n          bracketsError = `Closing bracket \"${char}\" does not match last opened char \"${lastOpenedBracket}\"`;\n        }\n      }\n    } else {\n      // if char IS empty \n      // AND currentVar str is not empty, then dump it to varsList and reset to empty string \n      if (currentVar.trim()) {\n        varsList.push(currentVar);\n        currentVar = '';\n      }\n    }\n  }\n\n  // if anything is still left in currentVar, then push it to varsList\n  if (currentVar.trim() && !bracketsError) {\n    varsList.push(currentVar);\n  }\n\n  if (bracketsQueue.length) {\n    bracketsError = `Last unclosed bracket \"${bracketsQueue[bracketsQueue.length - 1]}\" does not have closing bracket pair.`;\n  }\n\n  return {\n    type: consLogGenActions.UPDATE_VARS,\n    rawVars,\n    vars: varsList,\n    bracketsError,\n  };\n}\n","import { connect } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { VarsState } from \"./LogVars.reducers\";\nimport { LogVarsComponent } from \"./LogVars.component\";\nimport { setVars, resetVars } from \"./LogVars.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  vars: state.vars.vars,\n  rawVars: state.vars.rawVars,\n  bracketsError: state.vars.bracketsError,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (vars: VarsState['rawVars']) => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogVarsComponent);\n","import { CommentState } from \"./Comment.reducers\";\n\nexport const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment() {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment: CommentState) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { CommentState } from \"./Comment.reducers\";\nimport { CommentComponent } from \"./Comment.component\";\nimport { setComment, resetComment } from \"./Comment.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  comment: state.comment,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (comment: CommentState) => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentComponent);","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CommentProps } from './Comment.interface';\nimport HorizontalInput, { INPUT_TYPE } from '../Form/HorizontalInput';\n\nexport const CommentComponent: React.FC<CommentProps> = props => {\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Comment</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                props.resetComment();\n              }}\n            >\n              Reset comment\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"The comment\"\n          type={INPUT_TYPE.TEXTAREA}\n          onChange={(newValue: string) => props.onChange(newValue)}\n          value={props.comment}\n          rows={7}\n        />\n      </Col>\n    </Row>\n  );\n};\n\n\n\n","import { Settings } from \"../Settings/Settings.interface\";\n\nfunction wrapLineInPreAndPostFix(settings: Settings, line: string) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings: Settings, stringToWrap: string) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings: Settings, line: string) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine =\n    settings.filler.repeat(Math.floor(gap / 2)) +\n    ' ' +\n    line +\n    ' ' +\n    settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(settings: Settings, line: string) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(\n      new RegExp(settings.charEscaper, 'ig'),\n      `\\\\${settings.charEscaper}`,\n    );\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\n  );\n}\n\nexport function parseEmptyLine(settings: Settings) {\n  const emptyLine = wrapStringWithEscaperChar(\n    settings,\n    settings.filler.repeat(settings.lineLength),\n  );\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings: Settings, comment: string) {\n  return comment\n    .split('\\n')\n    .map(l => l.trim())\n    .map(l => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n');\n}\n\nexport function parseVar(settings: Settings, variable: string) {\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n      `${settings.variableConcatenateChar}` +\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\n  );\n}\n","import { connect } from \"react-redux\";\nimport { OutputComponent } from './Output.component';\nimport { RootState } from \"../../store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => ({\n  vars: state.vars.vars,\n  comment: state.comment,\n  settings: state.settings.values,\n});\n\nexport default connect(mapStateToProps)(OutputComponent);\n","import React from 'react';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\nimport { OutputComponentProps } from './Output.interface';\n\nexport const OutputComponent: React.FC<OutputComponentProps> = ({ vars, comment, settings }) => {\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map(v => parseVar(settings, v));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    parsedVarsLines.length > 0 ? emptyLine : '',\n    genPostfix,\n  ];\n\n  return (\n    <div className=\"card\">\n      <pre className=\"card-body\">\n        <code>\n          {outputText.filter(Boolean).map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n};\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Presets from './components/Presets/Presets.container';\nimport Settings from './components/Settings/Settings.container';\nimport LogVars from './components/LogVars/LogVars.container';\nimport Comment from './components/Comment/Comment.container';\nimport Output from './components/Output/Output.container';\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>JS Development helpers</h1>\n      <Presets />\n      <Settings />\n      <LogVars />\n      <Comment />\n      <Output />\n    </Container>\n  );\n};\n\nexport default App;\n","import { consLogGenActions } from './LogVars.actions';\nimport { AnyAction } from 'redux';\n\nconst varsInitialState: VarsState = {\n  vars: [],\n  rawVars: '',\n  bracketsError: '',\n};\n\nexport interface VarsState {\n  vars: string[];\n  rawVars: string;\n  bracketsError: string;\n};\n\nexport function vars(state = varsInitialState, action: AnyAction): VarsState {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.UPDATE_VARS:\n      return {\n        ...state,\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n        bracketsError: action.bracketsError,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { settings, SettingsState } from '../components/Settings/Settings.reducers';\nimport { vars, VarsState } from '../components/LogVars/LogVars.reducers';\nimport { comment, CommentState } from '../components/Comment/Comment.reducers';\n\nconst reducer = combineReducers({\n  settings,\n  vars,\n  comment,\n});\n\nexport interface RootState {\n  settings: SettingsState,\n  vars: VarsState,\n  comment: CommentState,\n};\n\nexport default reducer;\n","import { CommentActions } from './Comment.actions';\nimport { AnyAction } from 'redux';\n\nconst commentInitialState = 'your comment';\n\nexport type CommentState = string;\n\nexport function comment(state = commentInitialState, action: AnyAction) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './store/rootReducer';\nimport { loadState, saveState } from './store/localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n};\n"],"sourceRoot":""}