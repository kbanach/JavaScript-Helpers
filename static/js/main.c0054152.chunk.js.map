{"version":3,"sources":["components/Form/HorizontalInput.interface.ts","components/Form/HorizontalInput.component.tsx","components/Form/index.ts","components/Settings/Settings.actions.ts","components/Settings/Settings.interface.ts","components/Settings/Settings.container.ts","components/Settings/Settings.component.tsx","components/Settings/Settings.reducers.ts","components/Settings/Settings.selectors.ts","components/Settings/index.ts","components/Comment/Comment.actions.ts","components/LogVars/LogVars.actions.ts","components/Comment/index.ts","components/LogVars/index.ts","components/LogVars/LogVars.selectors.ts","components/index.ts","components/Comment/Comment.selectors.ts","components/Footer/Footer.tsx","components/Footer/index.ts","components/Comment/Comment.reducers.ts","components/LogVars/LogVars.reducers.ts","components/Output/index.ts","components/Presets/index.ts","components/Output/helpers.ts","components/Output/Output.component.tsx","components/Output/Output.container.ts","components/Comment/Comment.container.ts","components/Comment/Comment.component.tsx","components/LogVars/LogVars.container.ts","components/LogVars/LogVars.component.tsx","components/Presets/Presets.container.ts","components/Presets/Presets.component.tsx","pages/Logs/Logs.tsx","pages/TableOfContents/TableOfContents.tsx","App.tsx","store/rootReducer.ts","index.tsx","store/localStorage.js"],"names":["INPUT_TYPE","HorizontalInput","props","label","value","type","INPUT","onChange","errorMsg","rows","Form","Group","as","Row","className","Label","column","sm","Col","Control","e","preventDefault","target","isInvalid","TEXTAREA","Feedback","SettingsActions","loadSettingsPreset","preset","resetSettings","updateSettings","newSettingsValues","showAdvancedSettings","hideAdvancedSettings","PresetNames","Settings","connect","state","getShowAdvancedSettings","getSettingsValues","dispatch","showAdvanced","resetForm","hideAdvanced","Button","variant","size","onClick","filler","lineLenStr","lineLength","parseInt","isNaN","generalPrefix","generalPostfix","lineStart","lineEnd","charEscaper","variableConcatenateChar","prefix","variableWrapperCodePrefix","postfix","variableWrapperCodePostfix","settingsInitialState","currentPreset","DEFAULT","values","presetFullName","presetsValues","BROWSER","NODEJS","REACT_RENDER","CUSTOM","getPreset","presetName","settingsReducer","action","getSettings","settings","CommentActions","RESET_COMMENT","SET_COMMENT","resetComment","setComment","comment","consLogGenActions","RESET_VARS","UPDATE_VARS","resetVars","getClosingBracket","closing","isClosingBracket","val","test","setVars","rawVars","separator","varsList","currentVar","bracketsQueue","bracketsError","char","length","push","lastOpenedBracket","pop","trim","vars","getVars","getRawVars","getBracketsError","getComment","Footer","process","commentReducer","varsInitialState","varsReducer","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","copyToClipboard","text","a","navigator","clipboard","writeText","Output","useState","copiedFlag","setCopiedFlag","hideCopiedPopup","setHideCopiedPopup","genPrefix","genPostfix","parsedVarsLines","map","v","variable","parseVar","outputNonEmptyText","split","l","join","parseComment","filter","Boolean","setTimeout","k","key","Comment","newValue","LogVars","resetVariables","Presets","activePreset","changePreset","ButtonGroup","Object","Logs","Pages","TheTableOfContents","input","setInput","tableOfContents","setTableOfContents","useEffect","doc","fileContent","s","startsWith","fileLine","titleLine","matches","match","cleanupReadmeTitle","deepth","indent","escapedAnchor","toLowerCase","ch","getTableOfContentsFromDoc","style","width","App","LOGS","setKey","Container","Tabs","id","activeKey","onSelect","Tab","eventKey","title","TABLE_OF_CONTENTS","reducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0054152.chunk.js","sourcesContent":["export enum INPUT_TYPE {\n  INPUT = 'input',\n  TEXTAREA = 'textarea',\n}\n\nexport interface HorizontalInputProps {\n  label: string;\n  value: string;\n  type?: INPUT_TYPE;\n  errorMsg?: string;\n  rows?: number;\n  onChange: (val: string) => void;\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { INPUT_TYPE, HorizontalInputProps } from './HorizontalInput.interface';\n\nexport const HorizontalInput: React.FC<HorizontalInputProps> = (props) => {\n  const {\n    label,\n    value,\n    type = INPUT_TYPE.INPUT,\n    onChange,\n    errorMsg,\n    rows,\n  } = props;\n\n  return (\n    <Form.Group as={Row} className=\"align-items-center\">\n      <Form.Label column sm=\"3\">\n        {label}\n      </Form.Label>\n      <Col sm=\"9\">\n        {type === INPUT_TYPE.INPUT && (\n          <Form.Control\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? ('' as string));\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n          />\n        )}\n        {type === INPUT_TYPE.TEXTAREA && (\n          <Form.Control\n            as=\"textarea\"\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? ('' as string));\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n            rows={rows}\n          />\n        )}\n        {errorMsg && (\n          <Form.Control.Feedback type=\"invalid\">\n            {errorMsg}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n};\n","export * from './HorizontalInput.component';\nexport * from './HorizontalInput.interface';","import { PresetNames, SettingsValues } from \".\";\n\nexport const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset: PresetNames) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(newSettingsValues: Partial<SettingsValues>) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    newSettingsValues,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","export interface SettingsValues {\n  presetFullName: string;\n  filler: string;\n  lineLength: number;\n  lineStart: string;\n  lineEnd: string;\n  charEscaper: string;\n  variableConcatenateChar: string;\n  variableWrapperCodePrefix: string;\n  variableWrapperCodePostfix: string;\n  generalPrefix: string;\n  generalPostfix: string;\n}\n\nexport enum PresetNames {\n  BROWSER = 'BROWSER',\n  NODEJS = 'NODEJS',\n  REACT_RENDER = 'REACT_RENDER',\n  DEFAULT = 'DEFAULT',\n  CUSTOM = 'CUSTOM',\n}\n\nexport interface SettingsState {\n  currentPreset: PresetNames;\n  showAdvancedSettings: boolean;\n  values: SettingsValues;\n}\n\nexport interface SettingsStateProps extends SettingsValues {\n  showAdvancedSettings: SettingsState['showAdvancedSettings'];\n}\n\nexport interface SettingsDispatchProps {\n  onChange: (newSettingsValues: Partial<SettingsValues>) => void;\n  resetForm: () => void;\n  showAdvanced: () => void;\n  hideAdvanced: () => void;\n}\n\nexport interface SettingsComponentProps\n  extends SettingsStateProps,\n    SettingsDispatchProps {}\n","import { connect } from 'react-redux';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport {\n  SettingsStateProps,\n  getShowAdvancedSettings,\n  getSettingsValues,\n  SettingsDispatchProps,\n  updateSettings,\n  showAdvancedSettings,\n  resetSettings,\n  hideAdvancedSettings,\n  SettingsValues,\n} from '.';\nimport { SettingsComponent } from './Settings.component';\n\nconst mapStateToProps = (state: RootState): SettingsStateProps => ({\n  showAdvancedSettings: getShowAdvancedSettings(state),\n  ...getSettingsValues(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): SettingsDispatchProps => ({\n  onChange: (newSettingsValues: Partial<SettingsValues>) => {\n    dispatch(updateSettings(newSettingsValues));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport const Settings = connect(mapStateToProps, mapDispatchToProps)(SettingsComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SettingsValues, SettingsComponentProps } from './Settings.interface';\nimport { HorizontalInput } from '../Form';\n\nexport const SettingsComponent: React.FC<SettingsComponentProps> = (props) => {\n  const changeLineLength = (lineLenStr: string) => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    props.onChange({\n      lineLength,\n    });\n  };\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Settings</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={props.resetForm}\n            >\n              Reset settings\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"Char to use as filler\"\n          onChange={(filler: SettingsValues['filler']) => {\n            props.onChange({ filler });\n          }}\n          value={props.filler}\n        />\n\n        <HorizontalInput\n          label=\"Line length\"\n          onChange={changeLineLength}\n          value={'' + props.lineLength}\n        />\n\n        <Row>\n          <Col>\n            <h3>Advanced settings</h3>\n          </Col>\n          <Col className=\"text-right\">\n            {props.showAdvancedSettings ? (\n              <Button variant=\"primary\" size=\"sm\" onClick={props.hideAdvanced}>\n                Hide advanced settings\n              </Button>\n            ) : (\n              <Button\n                variant=\"outline-primary\"\n                size=\"sm\"\n                onClick={props.showAdvanced}\n              >\n                Show advanced settings\n              </Button>\n            )}\n          </Col>\n        </Row>\n\n        {props.showAdvancedSettings && (\n          <div>\n            <HorizontalInput\n              label=\"General prefix\"\n              onChange={(generalPrefix: SettingsValues['generalPrefix']) => {\n                props.onChange({ generalPrefix });\n              }}\n              value={props.generalPrefix}\n            />\n            <HorizontalInput\n              label=\"General postfix\"\n              onChange={(generalPostfix: SettingsValues['generalPostfix']) => {\n                props.onChange({ generalPostfix });\n              }}\n              value={props.generalPostfix}\n            />\n            <HorizontalInput\n              label=\"Line start\"\n              onChange={(lineStart: SettingsValues['lineStart']) => {\n                props.onChange({ lineStart });\n              }}\n              value={props.lineStart}\n            />\n            <HorizontalInput\n              label=\"Line end\"\n              onChange={(lineEnd: SettingsValues['lineEnd']) => {\n                props.onChange({ lineEnd });\n              }}\n              value={props.lineEnd}\n            />\n            <HorizontalInput\n              label=\"Char escaper\"\n              onChange={(charEscaper: SettingsValues['charEscaper']) => {\n                props.onChange({ charEscaper });\n              }}\n              value={props.charEscaper}\n            />\n            <HorizontalInput\n              label=\"Concatenate variable in log char\"\n              onChange={(\n                variableConcatenateChar: SettingsValues['variableConcatenateChar'],\n              ) => {\n                props.onChange({ variableConcatenateChar });\n              }}\n              value={props.variableConcatenateChar}\n            />\n            <HorizontalInput\n              label=\"Variable wrapper prefix\"\n              onChange={(prefix: SettingsValues['variableWrapperCodePrefix']) => {\n                props.onChange({ variableWrapperCodePrefix: prefix });\n              }}\n              value={props.variableWrapperCodePrefix}\n            />\n            <HorizontalInput\n              label=\"Variable wrapper postfix\"\n              onChange={(postfix: SettingsValues['variableWrapperCodePostfix']) => {\n                props.onChange({ variableWrapperCodePostfix: postfix });\n              }}\n              value={props.variableWrapperCodePostfix}\n            />\n          </div>\n        )}\n      </Col>\n    </Row>\n  );\n};\n","import { SettingsActions } from './Settings.actions';\nimport { AnyAction } from 'redux';\nimport { PresetNames, SettingsValues, SettingsState } from './Settings.interface';\n\n\nconst settingsInitialState = {\n  currentPreset: PresetNames.DEFAULT,\n  showAdvancedSettings: false,\n  values: {\n    presetFullName: 'Default',\n    filler: '*',\n    lineLength: 60,\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n};\n\nconst presetsValues: {\n  [key in PresetNames]: Partial<SettingsValues>;\n} = {\n  BROWSER: {\n    presetFullName: 'Browser',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n  NODEJS: {\n    presetFullName: 'NodeJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'util.inspect(',\n    variableWrapperCodePostfix: ', false, 5)',\n    generalPrefix: \"const util = require('util');\",\n    generalPostfix: '',\n  },\n  REACT_RENDER: {\n    presetFullName: 'React render() log',\n    lineStart: '',\n    lineEnd: '<br />',\n    charEscaper: '',\n    variableConcatenateChar: '',\n    variableWrapperCodePrefix: '{JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\n    generalPrefix: '<pre>',\n    generalPostfix: '</pre>',\n  },\n  DEFAULT: {\n    ...settingsInitialState.values,\n  },\n  CUSTOM: {\n    presetFullName: 'Custom',\n  },\n};\n\nexport function getPreset(presetName: PresetNames) {\n  return presetsValues[presetName];\n}\n\nexport function settingsReducer(\n  state = settingsInitialState,\n  action: AnyAction,\n): SettingsState {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        currentPreset: action.preset,\n        values: {\n          ...state.values,\n          ...getPreset(action.preset),\n        },\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        currentPreset: PresetNames.CUSTOM,\n        values: {\n          ...state.values,\n          ...getPreset(PresetNames.CUSTOM),\n          ...action.newSettingsValues,\n        },\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from '../../store/rootReducer';\n\nexport const getSettings = (state: RootState) => state.settings;\n\nexport const getShowAdvancedSettings = (state: RootState) =>\n  getSettings(state).showAdvancedSettings;\n\nexport const getSettingsValues = (state: RootState) =>\n  getSettings(state).values;\n","export * from './Settings.actions';\nexport * from './Settings.container';\nexport * from './Settings.interface';\nexport * from './Settings.reducers';\nexport * from './Settings.selectors';","import { CommentState } from './Comment.reducers';\n\nexport const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment() {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment: CommentState) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","import { VarsState } from './LogVars.reducers';\n\nexport const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  UPDATE_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\ntype OpeningBrackets = '(' | '{' | '[';\ntype ClosingBrackets = ')' | '}' | ']';\n\nconst getClosingBracket = (\n  closing: OpeningBrackets,\n): ClosingBrackets | undefined => {\n  switch (closing) {\n    case '(':\n      return ')' as ClosingBrackets;\n    case '{':\n      return '}' as ClosingBrackets;\n    case '[':\n      return ']' as ClosingBrackets;\n  }\n};\n\nconst isOpeningBracket = (val: any): val is OpeningBrackets => {\n  const openingBrackets: RegExp = /[({[]/;\n  return openingBrackets.test(val);\n};\n\nconst isClosingBracket = (val: any): val is ClosingBrackets => {\n  const closingBrackets: RegExp = /[)}\\]]/;\n  return closingBrackets.test(val);\n};\n\nexport function setVars(rawVars: VarsState['rawVars']) {\n  const separator: RegExp = /[ ,;]/;\n  const varsList: string[] = [];\n\n  let currentVar: string = '';\n  let bracketsQueue: OpeningBrackets[] = [];\n  let bracketsError: string = '';\n\n  for (let char of rawVars) {\n    if (bracketsError.length > 0) {\n      break;\n    }\n\n    // current char is not a separator OR any bracket is not opened\n    if (!separator.test(char) || bracketsQueue.length > 0) {\n      currentVar += char;\n\n      if (isOpeningBracket(char)) {\n        bracketsQueue.push(char);\n      }\n\n      if (isClosingBracket(char)) {\n        const lastOpenedBracket = bracketsQueue[bracketsQueue.length - 1];\n\n        if (\n          bracketsQueue.length &&\n          char === getClosingBracket(lastOpenedBracket)\n        ) {\n          bracketsQueue.pop();\n        } else {\n          bracketsError = `Closing bracket \"${char}\" does not match`;\n\n          if (lastOpenedBracket) {\n            bracketsError += ` last opened \"${lastOpenedBracket}\"`;\n          } else {\n            bracketsError += ` any opening bracket`;\n          }\n        }\n      }\n    } else {\n      // if char IS empty\n      // AND currentVar str is not empty, then dump it to varsList and reset to empty string\n      if (currentVar.trim()) {\n        varsList.push(currentVar);\n        currentVar = '';\n      }\n    }\n  }\n\n  // if anything is still left in currentVar, then push it to varsList\n  if (currentVar.trim() && !bracketsError) {\n    varsList.push(currentVar);\n  }\n\n  if (bracketsQueue.length && !bracketsError) {\n    bracketsError = `Last unclosed bracket \"${\n      bracketsQueue[bracketsQueue.length - 1]\n    }\" does not have closing bracket pair`;\n  }\n\n  return {\n    type: consLogGenActions.UPDATE_VARS,\n    rawVars,\n    vars: varsList,\n    bracketsError,\n  };\n}\n","export * from './Comment.container';\nexport * from './Comment.actions';\nexport * from './Comment.interface';\nexport * from './Comment.reducers';\nexport * from './Comment.selectors';","export * from './LogVars.container';\nexport * from './LogVars.actions';\nexport * from './LogVars.interface';\nexport * from './LogVars.reducers';\nexport * from './LogVars.selectors';","import { RootState } from '../../store/rootReducer';\n\nexport const getVars = (state: RootState) => state.vars.vars;\n\nexport const getRawVars = (state: RootState) => state.vars.rawVars;\n\nexport const getBracketsError = (state: RootState) => state.vars.bracketsError;\n","export * from './Comment/';\nexport * from './Footer/';\nexport * from './Form/';\nexport * from './LogVars/';\nexport * from './Output/';\nexport * from './Presets/';\nexport * from './Settings/';","import { RootState } from '../../store/rootReducer';\n\nexport const getComment = (state: RootState) => state.comment;\n","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport './Footer.css';\n\n\nexport const Footer: React.FC = () => (<Row>\n    {process.env.REACT_APP_BUILD_TIME && (<Col className=\"footer\">Built: {process.env.REACT_APP_BUILD_TIME}</Col>)}\n</Row>);\n","export * from './Footer';","import { CommentActions } from './Comment.actions';\nimport { AnyAction } from 'redux';\n\nconst commentInitialState = 'your comment';\n\nexport type CommentState = string;\n\nexport function commentReducer(state = commentInitialState, action: AnyAction) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n","import { consLogGenActions } from './LogVars.actions';\nimport { AnyAction } from 'redux';\n\nconst varsInitialState: VarsState = {\n  vars: [],\n  rawVars: '',\n  bracketsError: '',\n};\n\nexport interface VarsState {\n  vars: string[];\n  rawVars: string;\n  bracketsError: string;\n}\n\nexport function varsReducer(state = varsInitialState, action: AnyAction): VarsState {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.UPDATE_VARS:\n      return {\n        ...state,\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n        bracketsError: action.bracketsError,\n      };\n    default:\n      return state;\n  }\n}\n","export * from './Output.container';\nexport * from './Output.interface';","export * from './Presets.container';\nexport * from './Presets.interface';","import { SettingsValues } from '../Settings/Settings.interface';\n\nfunction wrapLineInPreAndPostFix(settings: SettingsValues, line: string) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings: SettingsValues, stringToWrap: string) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings: SettingsValues, line: string) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine =\n    settings.filler.repeat(Math.floor(gap / 2)) +\n    ' ' +\n    line +\n    ' ' +\n    settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(\n  settings: SettingsValues,\n  line: string,\n) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(\n      new RegExp(settings.charEscaper, 'ig'),\n      `\\\\${settings.charEscaper}`,\n    );\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\n  );\n}\n\nexport function parseEmptyLine(settings: SettingsValues) {\n  const emptyLine = wrapStringWithEscaperChar(\n    settings,\n    settings.filler.repeat(settings.lineLength),\n  );\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings: SettingsValues, comment: string) {\n  return comment\n    .split('\\n')\n    .map((l) => l.trim())\n    .map((l) => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n');\n}\n\nexport function parseVar(settings: SettingsValues, variable: string) {\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n      `${settings.variableConcatenateChar}` +\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\n  );\n}\n","import React, { useState } from 'react';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\nimport { OutputComponentProps } from './Output.interface';\n\nasync function copyToClipboard(text: string): Promise<void> {\n  navigator.clipboard.writeText(text);\n}\n\nexport const OutputComponent: React.FC<OutputComponentProps> = ({\n  vars,\n  comment,\n  settings,\n}) => {\n  const [copiedFlag, setCopiedFlag] = useState<Boolean>(false);\n  const [hideCopiedPopup, setHideCopiedPopup] = useState<Boolean>(false);\n\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map((v) => parseVar(settings, v));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputNonEmptyText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    parsedVarsLines.length > 0 ? emptyLine : '',\n    genPostfix,\n  ].filter(Boolean);\n\n  function addCopiedPopup() {\n    setHideCopiedPopup(false);\n    setCopiedFlag(true);\n\n    setTimeout(() => {\n      setHideCopiedPopup(true);\n    }, 1000);\n  }\n\n  return (\n    <div className=\"output card\">\n\n      {/* TODO: remmove code duplication of <pre> with copy on click for TableOfContents and Output */}\n      <pre\n        className={`card-body ${copiedFlag ? 'output__copied' : ''} ${hideCopiedPopup ? 'hide-popup' : ''}`}\n      >\n        <code\n          onClick={async () => {\n            await copyToClipboard(outputNonEmptyText.join('\\n'));\n            addCopiedPopup();\n          }}\n        >\n          {outputNonEmptyText.map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport { OutputComponent } from './Output.component';\nimport { RootState } from '../../store/rootReducer';\nimport { getVars } from '../LogVars';\nimport { getComment } from '../Comment';\nimport { getSettingsValues } from '../Settings';\nimport { OutputComponentStateProps } from './Output.interface';\n\nconst mapStateToProps = (state: RootState): OutputComponentStateProps => ({\n  vars: getVars(state),\n  comment: getComment(state),\n  settings: getSettingsValues(state),\n});\n\nexport const Output = connect(mapStateToProps)(OutputComponent);\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../../store/rootReducer';\nimport { CommentState } from './Comment.reducers';\nimport { CommentComponent } from './Comment.component';\nimport { setComment, resetComment } from './Comment.actions';\nimport { getComment } from './Comment.selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  comment: getComment(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (comment: CommentState) => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  },\n});\n\nexport const Comment = connect(mapStateToProps, mapDispatchToProps)(CommentComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CommentComponentProps } from './Comment.interface';\nimport { HorizontalInput, INPUT_TYPE } from '../Form/';\n\nexport const CommentComponent: React.FC<CommentComponentProps> = (props) => {\n  const { resetComment, onChange, comment } = props;\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Comment</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                resetComment();\n              }}\n            >\n              Reset comment\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"The comment\"\n          type={INPUT_TYPE.TEXTAREA}\n          onChange={(newValue: string) => onChange(newValue)}\n          value={comment}\n          rows={7}\n        />\n      </Col>\n    </Row>\n  );\n};\n","import { connect } from 'react-redux';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport { VarsState } from './LogVars.reducers';\nimport { LogVarsComponent } from './LogVars.component';\nimport { setVars, resetVars } from './LogVars.actions';\nimport { getBracketsError, getRawVars, getVars } from './LogVars.selectors';\nimport { LogVarsStateProps, LogVarsDispatchProps } from './LogVars.interface';\n\nconst mapStateToProps = (state: RootState): LogVarsStateProps => ({\n  vars: getVars(state),\n  rawVars: getRawVars(state),\n  bracketsError: getBracketsError(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): LogVarsDispatchProps => ({\n  onChange: (vars: VarsState['rawVars']) => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\nexport const LogVars = connect(mapStateToProps, mapDispatchToProps)(LogVarsComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { LogVarsComponentProps } from './LogVars.interface';\nimport { VarsState } from './LogVars.reducers';\nimport { HorizontalInput } from '../Form';\n\nexport const LogVarsComponent: React.FC<LogVarsComponentProps> = (props) => {\n  const { resetVariables, onChange, rawVars, bracketsError } = props;\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Variables</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                resetVariables();\n              }}\n            >\n              Reset variables\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"Variable names to log\"\n          onChange={(rawVars: VarsState['rawVars']) => {\n            onChange(rawVars);\n          }}\n          value={rawVars}\n          errorMsg={bracketsError}\n        />\n      </Col>\n    </Row>\n  );\n};\n","import { connect } from 'react-redux';\nimport { loadSettingsPreset, PresetNames } from '../Settings';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport { PresetsComponent } from './Presets.component';\nimport { PresetsStateProps, PresetsDispatchProps } from '.';\n\nconst mapStateToProps = (state: RootState): PresetsStateProps => ({\n  activePreset: state.settings.currentPreset,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): PresetsDispatchProps => ({\n  changePreset: (preset: PresetNames) => {\n    dispatch(loadSettingsPreset(preset));\n  },\n});\n\nexport const Presets = connect(mapStateToProps, mapDispatchToProps)(PresetsComponent);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { PresetsComponentProps } from './Presets.interface';\nimport { PresetNames, getPreset } from '../Settings';\n\nexport const PresetsComponent: React.FC<PresetsComponentProps> = (props) => (\n  <Row>\n    <Col className=\"d-flex flex-column\">\n      <h3>Presets</h3>\n      <ButtonGroup size=\"sm\" className=\"mt-3\">\n        {Object.values(PresetNames).map((key) => (\n          <Button\n            key={key}\n            variant={props.activePreset === key ? 'primary' : 'outline-primary'}\n            onClick={() => props.changePreset(key)}\n          >\n            {getPreset(key).presetFullName}\n          </Button>\n        ))}\n      </ButtonGroup>\n      <br />\n    </Col>\n  </Row>\n);\n","import React from \"react\";\nimport { LogVars, Output, Comment, Presets, Settings } from \"../../components/\";\n\nexport const Logs = () => (\n    <>\n        <Presets />\n        <Settings />\n        <LogVars />\n        <Comment />\n        <Output />\n    </>\n);","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport './TableOfContents.css';\n\nconst getTitlesOnly = (fileContent: string): string[] => {\n    return fileContent.split('\\n').filter(s => s.startsWith('#'));\n}\n\nconst cleanupReadmeTitle = (titleLine: string): [string, number] => {\n    const matches: number = titleLine.match(/#/g)?.length ?? 0;\n    const titleWithoutHash = titleLine.replace(/#* /i, '');\n\n    return [titleWithoutHash, matches];\n}\n\nconst getTableOfContentsFromDoc = (doc: string) => {\n    return getTitlesOnly(doc)\n        .map((fileLine) => {\n            const [line, deepth] = cleanupReadmeTitle(fileLine);\n\n            if (deepth === 1) {\n                return '';\n            }\n\n            let indent = '';\n\n            if (deepth > 2) {\n                indent += ' '.repeat(4 * (deepth - 2));\n            }\n\n            const escapedAnchor = line.toLowerCase()\n                .replace(/ /ig, '-')\n                .split('')\n                .filter((ch: string) => /[-\\w]/ig.test(ch))\n                .join('');\n\n            return `${indent}1. [${line}](#${escapedAnchor})`;\n        })\n        .filter(Boolean)\n        .join('\\n');\n}\n\nconst defaultText = `\\\n# The title, which is ignored\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n\n## First section\n\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n\n### Subsection (of first section)\n\nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n### Second subsection\n\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n## Second section\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\n## Third section\n\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \n`;\n\nasync function copyToClipboard(text: string): Promise<void> {\n    navigator.clipboard.writeText(text);\n}\n\nexport const TheTableOfContents = () => {\n    const [copiedFlag, setCopiedFlag] = useState<Boolean>(false);\n    const [hideCopiedPopup, setHideCopiedPopup] = useState<Boolean>(false);\n    const [input, setInput] = useState<string>(defaultText);\n    const [tableOfContents, setTableOfContents] = useState<string>('');\n\n    const addCopiedPopup = () => {\n        setHideCopiedPopup(false);\n        setCopiedFlag(true);\n\n        setTimeout(() => {\n            setHideCopiedPopup(true);\n        }, 1000);\n    }\n\n    useEffect(() => {\n        setTableOfContents(getTableOfContentsFromDoc(input));\n    }, [input]);\n\n    return (<div className=\"table-of-contents\">\n        <div className=\"card\">\n            {/* TODO: remmove code duplication of <pre> with copy on click for TableOfContents and Output */}\n            <pre className={`card-body ${copiedFlag ? 'table-of-contents__copied' : ''} ${hideCopiedPopup ? 'hide-popup' : ''}`}>\n                <code\n                    onClick={async () => {\n                        await copyToClipboard(tableOfContents);\n                        addCopiedPopup();\n                    }}\n                >{tableOfContents}</code>\n            </pre>\n        </div>\n        <br />\n\n\n        <Form.Control as=\"textarea\" onChange={(e) => setInput(e.target.value)} rows={20} style={{ width: '100%' }} value={input} />\n    </div>)\n}","import React, { useState } from 'react';\nimport { Col, Container, Row, Tab, Tabs } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { Logs, TheTableOfContents } from './pages';\nimport { Footer } from './components/Footer';\n\nenum Pages {\n  LOGS = 'Logs Generator',\n  TABLE_OF_CONTENTS = 'Table of Contents Generator',\n}\n\nconst App = () => {\n  const [key, setKey] = useState<string>(Pages.LOGS);\n\n  return (\n    <Container>\n      <Row>\n        <Col className=\"d-flex flex-column\">\n          <Tabs\n            id=\"controlled-tab\"\n            activeKey={key}\n            onSelect={(k) => { k && setKey(k); }}\n          >\n            <Tab eventKey={Pages.LOGS} title={Pages.LOGS} className=\"app__page\">\n              <Logs />\n            </Tab>\n            <Tab eventKey={Pages.TABLE_OF_CONTENTS} title={Pages.TABLE_OF_CONTENTS}  className=\"app__page\">\n              <TheTableOfContents />\n            </Tab>\n          </Tabs>\n        <Footer />\n        </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { settingsReducer, SettingsState } from '../components/Settings';\nimport { varsReducer, VarsState } from '../components/LogVars';\nimport { commentReducer, CommentState } from '../components/Comment';\n\nconst reducer = combineReducers({\n  settings: settingsReducer,\n  vars: varsReducer,\n  comment: commentReducer,\n});\n\nexport interface RootState {\n  settings: SettingsState;\n  vars: VarsState;\n  comment: CommentState;\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './store/rootReducer';\nimport { loadState, saveState } from './store/localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n};\n"],"sourceRoot":""}