{"version":3,"sources":["components/Form/HorizontalInput.interface.ts","components/Form/HorizontalInput.component.tsx","components/Form/index.ts","components/Settings/Settings.actions.ts","components/Settings/Settings.interface.ts","components/Settings/Settings.container.ts","components/Settings/Settings.component.tsx","components/Settings/Settings.reducers.ts","components/Settings/Settings.selectors.ts","components/Settings/index.ts","components/LogVars/LogVars.actions.ts","components/Comment/Comment.actions.ts","components/LogVars/index.ts","components/LogVars/LogVars.selectors.ts","components/Comment/index.ts","components/Comment/Comment.selectors.ts","components/LogVars/LogVars.reducers.ts","components/Comment/Comment.reducers.ts","components/Output/helpers.ts","components/Output/Output.container.ts","components/Output/Output.component.tsx","components/LogVars/LogVars.container.ts","components/LogVars/LogVars.component.tsx","components/Comment/Comment.container.ts","components/Comment/Comment.component.tsx","components/Presets/Presets.container.ts","components/Presets/Presets.component.tsx","components/Output/index.ts","components/Presets/index.ts","App.tsx","store/rootReducer.ts","index.tsx","store/localStorage.js"],"names":["INPUT_TYPE","HorizontalInput","props","label","value","type","INPUT","onChange","errorMsg","rows","Form","Group","as","Row","className","Label","column","sm","Col","Control","e","preventDefault","target","isInvalid","TEXTAREA","Feedback","SettingsActions","loadSettingsPreset","preset","resetSettings","updateSettings","newSettingsValues","showAdvancedSettings","hideAdvancedSettings","PresetNames","Settings","connect","state","getShowAdvancedSettings","getSettingsValues","dispatch","showAdvanced","resetForm","hideAdvanced","Button","variant","size","onClick","filler","lineLenStr","lineLength","parseInt","isNaN","generalPrefix","generalPostfix","lineStart","lineEnd","charEscaper","variableConcatenateChar","prefix","variableWrapperCodePrefix","postfix","variableWrapperCodePostfix","settingsInitialState","currentPreset","DEFAULT","values","presetFullName","presetsValues","BROWSER","NODEJS","REACT_RENDER","CUSTOM","getPreset","presetName","settingsReducer","action","getSettings","settings","consLogGenActions","RESET_VARS","UPDATE_VARS","resetVars","getClosingBracket","closing","isClosingBracket","val","test","setVars","rawVars","separator","varsList","currentVar","bracketsQueue","bracketsError","char","length","push","lastOpenedBracket","pop","trim","vars","CommentActions","RESET_COMMENT","SET_COMMENT","resetComment","setComment","comment","getVars","getRawVars","getBracketsError","getComment","varsInitialState","varsReducer","commentReducer","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","Output","genPrefix","genPostfix","parsedVarsLines","map","v","variable","parseVar","outputText","split","l","join","parseComment","filter","Boolean","k","key","LogVars","resetVariables","Comment","newValue","Presets","activePreset","changePreset","ButtonGroup","Object","App","Container","reducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81102b0c.chunk.js","sourcesContent":["export enum INPUT_TYPE {\n  INPUT = 'input',\n  TEXTAREA = 'textarea',\n}\n\nexport interface HorizontalInputProps {\n  label: string;\n  value: string;\n  type?: INPUT_TYPE;\n  errorMsg?: string;\n  rows?: number;\n  onChange: (val: string) => void;\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { INPUT_TYPE, HorizontalInputProps } from './HorizontalInput.interface';\n\nexport const HorizontalInput: React.FC<HorizontalInputProps> = (props) => {\n  const {\n    label,\n    value,\n    type = INPUT_TYPE.INPUT,\n    onChange,\n    errorMsg,\n    rows,\n  } = props;\n\n  return (\n    <Form.Group as={Row} className=\"align-items-center\">\n      <Form.Label column sm=\"3\">\n        {label}\n      </Form.Label>\n      <Col sm=\"9\">\n        {type === INPUT_TYPE.INPUT && (\n          <Form.Control\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? ('' as string));\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n          />\n        )}\n        {type === INPUT_TYPE.TEXTAREA && (\n          <Form.Control\n            as=\"textarea\"\n            onChange={(e: any) => {\n              e.preventDefault();\n              onChange(e?.target?.value ?? ('' as string));\n            }}\n            isInvalid={!!errorMsg}\n            value={value}\n            rows={rows}\n          />\n        )}\n        {errorMsg && (\n          <Form.Control.Feedback type=\"invalid\">\n            {errorMsg}\n          </Form.Control.Feedback>\n        )}\n      </Col>\n    </Form.Group>\n  );\n};\n","export * from './HorizontalInput.component';\nexport * from './HorizontalInput.interface';","import { PresetNames, SettingsValues } from \".\";\n\nexport const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset: PresetNames) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(newSettingsValues: Partial<SettingsValues>) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    newSettingsValues,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","export interface SettingsValues {\n  presetFullName: string;\n  filler: string;\n  lineLength: number;\n  lineStart: string;\n  lineEnd: string;\n  charEscaper: string;\n  variableConcatenateChar: string;\n  variableWrapperCodePrefix: string;\n  variableWrapperCodePostfix: string;\n  generalPrefix: string;\n  generalPostfix: string;\n}\n\nexport enum PresetNames {\n  BROWSER = 'BROWSER',\n  NODEJS = 'NODEJS',\n  REACT_RENDER = 'REACT_RENDER',\n  DEFAULT = 'DEFAULT',\n  CUSTOM = 'CUSTOM',\n}\n\nexport interface SettingsState {\n  currentPreset: PresetNames;\n  showAdvancedSettings: boolean;\n  values: SettingsValues;\n}\n\nexport interface SettingsStateProps extends SettingsValues {\n  showAdvancedSettings: SettingsState['showAdvancedSettings'];\n}\n\nexport interface SettingsDispatchProps {\n  onChange: (newSettingsValues: Partial<SettingsValues>) => void;\n  resetForm: () => void;\n  showAdvanced: () => void;\n  hideAdvanced: () => void;\n}\n\nexport interface SettingsComponentProps\n  extends SettingsStateProps,\n    SettingsDispatchProps {}\n","import { connect } from 'react-redux';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport {\n  SettingsStateProps,\n  getShowAdvancedSettings,\n  getSettingsValues,\n  SettingsDispatchProps,\n  updateSettings,\n  showAdvancedSettings,\n  resetSettings,\n  hideAdvancedSettings,\n  SettingsValues,\n} from '.';\nimport { SettingsComponent } from './Settings.component';\n\nconst mapStateToProps = (state: RootState): SettingsStateProps => ({\n  showAdvancedSettings: getShowAdvancedSettings(state),\n  ...getSettingsValues(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): SettingsDispatchProps => ({\n  onChange: (newSettingsValues: Partial<SettingsValues>) => {\n    dispatch(updateSettings(newSettingsValues));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport const Settings = connect(mapStateToProps, mapDispatchToProps)(SettingsComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SettingsValues, SettingsComponentProps } from './Settings.interface';\nimport { HorizontalInput } from '../Form';\n\nexport const SettingsComponent: React.FC<SettingsComponentProps> = (props) => {\n  const changeLineLength = (lineLenStr: string) => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    props.onChange({\n      lineLength,\n    });\n  };\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Settings</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={props.resetForm}\n            >\n              Reset settings\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"Char to use as filler\"\n          onChange={(filler: SettingsValues['filler']) => {\n            props.onChange({ filler });\n          }}\n          value={props.filler}\n        />\n\n        <HorizontalInput\n          label=\"Line length\"\n          onChange={changeLineLength}\n          value={'' + props.lineLength}\n        />\n\n        <Row>\n          <Col>\n            <h3>Advanced settings</h3>\n          </Col>\n          <Col className=\"text-right\">\n            {props.showAdvancedSettings ? (\n              <Button variant=\"primary\" size=\"sm\" onClick={props.hideAdvanced}>\n                Hide advanced settings\n              </Button>\n            ) : (\n              <Button\n                variant=\"outline-primary\"\n                size=\"sm\"\n                onClick={props.showAdvanced}\n              >\n                Show advanced settings\n              </Button>\n            )}\n          </Col>\n        </Row>\n\n        {props.showAdvancedSettings && (\n          <div>\n            <HorizontalInput\n              label=\"General prefix\"\n              onChange={(generalPrefix: SettingsValues['generalPrefix']) => {\n                props.onChange({ generalPrefix });\n              }}\n              value={props.generalPrefix}\n            />\n            <HorizontalInput\n              label=\"General postfix\"\n              onChange={(generalPostfix: SettingsValues['generalPostfix']) => {\n                props.onChange({ generalPostfix });\n              }}\n              value={props.generalPostfix}\n            />\n            <HorizontalInput\n              label=\"Line start\"\n              onChange={(lineStart: SettingsValues['lineStart']) => {\n                props.onChange({ lineStart });\n              }}\n              value={props.lineStart}\n            />\n            <HorizontalInput\n              label=\"Line end\"\n              onChange={(lineEnd: SettingsValues['lineEnd']) => {\n                props.onChange({ lineEnd });\n              }}\n              value={props.lineEnd}\n            />\n            <HorizontalInput\n              label=\"Char escaper\"\n              onChange={(charEscaper: SettingsValues['charEscaper']) => {\n                props.onChange({ charEscaper });\n              }}\n              value={props.charEscaper}\n            />\n            <HorizontalInput\n              label=\"Concatenate variable in log char\"\n              onChange={(\n                variableConcatenateChar: SettingsValues['variableConcatenateChar'],\n              ) => {\n                props.onChange({ variableConcatenateChar });\n              }}\n              value={props.variableConcatenateChar}\n            />\n            <HorizontalInput\n              label=\"Variable wrapper prefix\"\n              onChange={(prefix: SettingsValues['variableWrapperCodePrefix']) => {\n                props.onChange({ variableWrapperCodePrefix: prefix });\n              }}\n              value={props.variableWrapperCodePrefix}\n            />\n            <HorizontalInput\n              label=\"Variable wrapper postfix\"\n              onChange={(postfix: SettingsValues['variableWrapperCodePostfix']) => {\n                props.onChange({ variableWrapperCodePostfix: postfix });\n              }}\n              value={props.variableWrapperCodePostfix}\n            />\n          </div>\n        )}\n      </Col>\n    </Row>\n  );\n};\n","import { SettingsActions } from './Settings.actions';\nimport { AnyAction } from 'redux';\nimport { PresetNames, SettingsValues, SettingsState } from './Settings.interface';\n\n\nconst settingsInitialState = {\n  currentPreset: PresetNames.DEFAULT,\n  showAdvancedSettings: false,\n  values: {\n    presetFullName: 'Default',\n    filler: '*',\n    lineLength: 60,\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n};\n\nconst presetsValues: {\n  [key in PresetNames]: Partial<SettingsValues>;\n} = {\n  BROWSER: {\n    presetFullName: 'Browser',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n  NODEJS: {\n    presetFullName: 'NodeJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'util.inspect(',\n    variableWrapperCodePostfix: ', false, 5)',\n    generalPrefix: \"const util = require('util');\",\n    generalPostfix: '',\n  },\n  REACT_RENDER: {\n    presetFullName: 'React render() log',\n    lineStart: '',\n    lineEnd: '<br />',\n    charEscaper: '',\n    variableConcatenateChar: '',\n    variableWrapperCodePrefix: '{JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\n    generalPrefix: '<pre>',\n    generalPostfix: '</pre>',\n  },\n  DEFAULT: {\n    ...settingsInitialState.values,\n  },\n  CUSTOM: {\n    presetFullName: 'Custom',\n  },\n};\n\nexport function getPreset(presetName: PresetNames) {\n  return presetsValues[presetName];\n}\n\nexport function settingsReducer(\n  state = settingsInitialState,\n  action: AnyAction,\n): SettingsState {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        currentPreset: action.preset,\n        values: {\n          ...state.values,\n          ...getPreset(action.preset),\n        },\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        currentPreset: PresetNames.CUSTOM,\n        values: {\n          ...state.values,\n          ...getPreset(PresetNames.CUSTOM),\n          ...action.newSettingsValues,\n        },\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { RootState } from '../../store/rootReducer';\n\nexport const getSettings = (state: RootState) => state.settings;\n\nexport const getShowAdvancedSettings = (state: RootState) =>\n  getSettings(state).showAdvancedSettings;\n\nexport const getSettingsValues = (state: RootState) =>\n  getSettings(state).values;\n","export * from './Settings.actions';\nexport * from './Settings.container';\nexport * from './Settings.interface';\nexport * from './Settings.reducers';\nexport * from './Settings.selectors';","import { VarsState } from './LogVars.reducers';\n\nexport const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  UPDATE_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\ntype OpeningBrackets = '(' | '{' | '[';\ntype ClosingBrackets = ')' | '}' | ']';\n\nconst getClosingBracket = (\n  closing: OpeningBrackets,\n): ClosingBrackets | undefined => {\n  switch (closing) {\n    case '(':\n      return ')' as ClosingBrackets;\n    case '{':\n      return '}' as ClosingBrackets;\n    case '[':\n      return ']' as ClosingBrackets;\n  }\n};\n\nconst isOpeningBracket = (val: any): val is OpeningBrackets => {\n  const openingBrackets: RegExp = /[({[]/;\n  return openingBrackets.test(val);\n};\n\nconst isClosingBracket = (val: any): val is ClosingBrackets => {\n  const closingBrackets: RegExp = /[)}\\]]/;\n  return closingBrackets.test(val);\n};\n\nexport function setVars(rawVars: VarsState['rawVars']) {\n  const separator: RegExp = /[ ,;]/;\n  const varsList: string[] = [];\n\n  let currentVar: string = '';\n  let bracketsQueue: OpeningBrackets[] = [];\n  let bracketsError: string = '';\n\n  for (let char of rawVars) {\n    if (bracketsError.length > 0) {\n      break;\n    }\n\n    // current char is not a separator OR any bracket is not opened\n    if (!separator.test(char) || bracketsQueue.length > 0) {\n      currentVar += char;\n\n      if (isOpeningBracket(char)) {\n        bracketsQueue.push(char);\n      }\n\n      if (isClosingBracket(char)) {\n        const lastOpenedBracket = bracketsQueue[bracketsQueue.length - 1];\n\n        if (\n          bracketsQueue.length &&\n          char === getClosingBracket(lastOpenedBracket)\n        ) {\n          bracketsQueue.pop();\n        } else {\n          bracketsError = `Closing bracket \"${char}\" does not match`;\n\n          if (lastOpenedBracket) {\n            bracketsError += ` last opened \"${lastOpenedBracket}\"`;\n          } else {\n            bracketsError += ` any opening bracket`;\n          }\n        }\n      }\n    } else {\n      // if char IS empty\n      // AND currentVar str is not empty, then dump it to varsList and reset to empty string\n      if (currentVar.trim()) {\n        varsList.push(currentVar);\n        currentVar = '';\n      }\n    }\n  }\n\n  // if anything is still left in currentVar, then push it to varsList\n  if (currentVar.trim() && !bracketsError) {\n    varsList.push(currentVar);\n  }\n\n  if (bracketsQueue.length && !bracketsError) {\n    bracketsError = `Last unclosed bracket \"${\n      bracketsQueue[bracketsQueue.length - 1]\n    }\" does not have closing bracket pair`;\n  }\n\n  return {\n    type: consLogGenActions.UPDATE_VARS,\n    rawVars,\n    vars: varsList,\n    bracketsError,\n  };\n}\n","import { CommentState } from './Comment.reducers';\n\nexport const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment() {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment: CommentState) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","export * from './LogVars.container';\nexport * from './LogVars.actions';\nexport * from './LogVars.interface';\nexport * from './LogVars.reducers';\nexport * from './LogVars.selectors';","import { RootState } from '../../store/rootReducer';\n\nexport const getVars = (state: RootState) => state.vars.vars;\n\nexport const getRawVars = (state: RootState) => state.vars.rawVars;\n\nexport const getBracketsError = (state: RootState) => state.vars.bracketsError;\n","export * from './Comment.container';\nexport * from './Comment.actions';\nexport * from './Comment.interface';\nexport * from './Comment.reducers';\nexport * from './Comment.selectors';","import { RootState } from '../../store/rootReducer';\n\nexport const getComment = (state: RootState) => state.comment;\n","import { consLogGenActions } from './LogVars.actions';\nimport { AnyAction } from 'redux';\n\nconst varsInitialState: VarsState = {\n  vars: [],\n  rawVars: '',\n  bracketsError: '',\n};\n\nexport interface VarsState {\n  vars: string[];\n  rawVars: string;\n  bracketsError: string;\n}\n\nexport function varsReducer(state = varsInitialState, action: AnyAction): VarsState {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.UPDATE_VARS:\n      return {\n        ...state,\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n        bracketsError: action.bracketsError,\n      };\n    default:\n      return state;\n  }\n}\n","import { CommentActions } from './Comment.actions';\nimport { AnyAction } from 'redux';\n\nconst commentInitialState = 'your comment';\n\nexport type CommentState = string;\n\nexport function commentReducer(state = commentInitialState, action: AnyAction) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n","import { SettingsValues } from '../Settings/Settings.interface';\n\nfunction wrapLineInPreAndPostFix(settings: SettingsValues, line: string) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings: SettingsValues, stringToWrap: string) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings: SettingsValues, line: string) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine =\n    settings.filler.repeat(Math.floor(gap / 2)) +\n    ' ' +\n    line +\n    ' ' +\n    settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(\n  settings: SettingsValues,\n  line: string,\n) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(\n      new RegExp(settings.charEscaper, 'ig'),\n      `\\\\${settings.charEscaper}`,\n    );\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\n  );\n}\n\nexport function parseEmptyLine(settings: SettingsValues) {\n  const emptyLine = wrapStringWithEscaperChar(\n    settings,\n    settings.filler.repeat(settings.lineLength),\n  );\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings: SettingsValues, comment: string) {\n  return comment\n    .split('\\n')\n    .map((l) => l.trim())\n    .map((l) => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n');\n}\n\nexport function parseVar(settings: SettingsValues, variable: string) {\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n      `${settings.variableConcatenateChar}` +\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\n  );\n}\n","import { connect } from 'react-redux';\nimport { OutputComponent } from './Output.component';\nimport { RootState } from '../../store/rootReducer';\nimport { getVars } from '../LogVars';\nimport { getComment } from '../Comment';\nimport { getSettingsValues } from '../Settings';\nimport { OutputComponentStateProps } from './Output.interface';\n\nconst mapStateToProps = (state: RootState): OutputComponentStateProps => ({\n  vars: getVars(state),\n  comment: getComment(state),\n  settings: getSettingsValues(state),\n});\n\nexport const Output = connect(mapStateToProps)(OutputComponent);\n","import React from 'react';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\nimport { OutputComponentProps } from './Output.interface';\n\nexport const OutputComponent: React.FC<OutputComponentProps> = ({\n  vars,\n  comment,\n  settings,\n}) => {\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map((v) => parseVar(settings, v));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    parsedVarsLines.length > 0 ? emptyLine : '',\n    genPostfix,\n  ];\n\n  return (\n    <div className=\"card\">\n      <pre className=\"card-body\">\n        <code>\n          {outputText.filter(Boolean).map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport { VarsState } from './LogVars.reducers';\nimport { LogVarsComponent } from './LogVars.component';\nimport { setVars, resetVars } from './LogVars.actions';\nimport { getBracketsError, getRawVars, getVars } from './LogVars.selectors';\nimport { LogVarsStateProps, LogVarsDispatchProps } from './LogVars.interface';\n\nconst mapStateToProps = (state: RootState): LogVarsStateProps => ({\n  vars: getVars(state),\n  rawVars: getRawVars(state),\n  bracketsError: getBracketsError(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): LogVarsDispatchProps => ({\n  onChange: (vars: VarsState['rawVars']) => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\nexport const LogVars = connect(mapStateToProps, mapDispatchToProps)(LogVarsComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { LogVarsComponentProps } from './LogVars.interface';\nimport { VarsState } from './LogVars.reducers';\nimport { HorizontalInput } from '../Form';\n\nexport const LogVarsComponent: React.FC<LogVarsComponentProps> = (props) => {\n  const { resetVariables, onChange, rawVars, bracketsError } = props;\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Variables</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                resetVariables();\n              }}\n            >\n              Reset variables\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"Variable names to log\"\n          onChange={(rawVars: VarsState['rawVars']) => {\n            onChange(rawVars);\n          }}\n          value={rawVars}\n          errorMsg={bracketsError}\n        />\n      </Col>\n    </Row>\n  );\n};\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { RootState } from '../../store/rootReducer';\nimport { CommentState } from './Comment.reducers';\nimport { CommentComponent } from './Comment.component';\nimport { setComment, resetComment } from './Comment.actions';\nimport { getComment } from './Comment.selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  comment: getComment(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (comment: CommentState) => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  },\n});\n\nexport const Comment = connect(mapStateToProps, mapDispatchToProps)(CommentComponent);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CommentComponentProps } from './Comment.interface';\nimport { HorizontalInput, INPUT_TYPE } from '../Form/';\n\nexport const CommentComponent: React.FC<CommentComponentProps> = (props) => {\n  const { resetComment, onChange, comment } = props;\n\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Comment</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                resetComment();\n              }}\n            >\n              Reset comment\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"The comment\"\n          type={INPUT_TYPE.TEXTAREA}\n          onChange={(newValue: string) => onChange(newValue)}\n          value={comment}\n          rows={7}\n        />\n      </Col>\n    </Row>\n  );\n};\n","import { connect } from 'react-redux';\nimport { loadSettingsPreset, PresetNames } from '../Settings';\nimport { RootState } from '../../store/rootReducer';\nimport { Dispatch } from 'redux';\nimport { PresetsComponent } from './Presets.component';\nimport { PresetsStateProps, PresetsDispatchProps } from '.';\n\nconst mapStateToProps = (state: RootState): PresetsStateProps => ({\n  activePreset: state.settings.currentPreset,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): PresetsDispatchProps => ({\n  changePreset: (preset: PresetNames) => {\n    dispatch(loadSettingsPreset(preset));\n  },\n});\n\nexport const Presets = connect(mapStateToProps, mapDispatchToProps)(PresetsComponent);\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { PresetsComponentProps } from './Presets.interface';\nimport { PresetNames, getPreset } from '../Settings';\n\nexport const PresetsComponent: React.FC<PresetsComponentProps> = (props) => (\n  <Row>\n    <Col className=\"d-flex flex-column\">\n      <h3>Presets</h3>\n      <ButtonGroup size=\"sm\" className=\"mt-3\">\n        {Object.values(PresetNames).map((key) => (\n          <Button\n            key={key}\n            variant={props.activePreset === key ? 'primary' : 'outline-primary'}\n            onClick={() => props.changePreset(key)}\n          >\n            {getPreset(key).presetFullName}\n          </Button>\n        ))}\n      </ButtonGroup>\n      <br />\n    </Col>\n  </Row>\n);\n","export * from './Output.container';\nexport * from './Output.interface';","export * from './Presets.container';\nexport * from './Presets.interface';","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { Settings } from './components/Settings';\nimport { LogVars } from './components/LogVars';\nimport { Comment } from './components/Comment';\nimport { Output } from './components/Output';\nimport { Presets } from './components/Presets';\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>JS Development helpers</h1>\n      <Presets />\n      <Settings />\n      <LogVars />\n      <Comment />\n      <Output />\n    </Container>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { settingsReducer, SettingsState } from '../components/Settings';\nimport { varsReducer, VarsState } from '../components/LogVars';\nimport { commentReducer, CommentState } from '../components/Comment';\n\nconst reducer = combineReducers({\n  settings: settingsReducer,\n  vars: varsReducer,\n  comment: commentReducer,\n});\n\nexport interface RootState {\n  settings: SettingsState;\n  vars: VarsState;\n  comment: CommentState;\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './store/rootReducer';\nimport { loadState, saveState } from './store/localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n};\n"],"sourceRoot":""}