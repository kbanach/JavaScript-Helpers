{"version":3,"sources":["components/Settings/Settings.actions.js","components/Settings/Settings.reducers.js","components/Presets/Presets.js","components/Form/HorizontalInput.js","components/Settings/Settings.js","components/LogVars/LogVars.actions.js","components/LogVars/LogVars.js","components/Comment/Comment.actions.js","components/Comment/Comment.js","components/Output/helpers.js","components/Output/Output.js","App.js","components/LogVars/LogVars.reducers.js","components/Comment/Comment.reducers.js","rootReducer.js","index.js","localStorage.js"],"names":["SettingsActions","LOAD_PRESET","RESET_SETTINGS","UPDATE_SETTINGS","SHOW_ADVANCED","HIDE_ADVANCED","settingsInitialState","presetType","filler","lineLength","showAdvancedSettings","lineStart","lineEnd","charEscaper","variableConcatenateChar","variableWrapperCodePrefix","variableWrapperCodePostfix","generalPrefix","generalPostfix","presets","BROWSER","NODEJS","DEFAULT","CUSTOM","PRESETS","Object","keys","Presets","Row","Col","className","ButtonGroup","size","map","p","k","props","activePreset","Button","key","variant","onClick","changePreset","React","Component","connect","state","settings","dispatch","preset","type","loadSettingsPreset","INPUT_TYPE","HorizontalInput","label","onChange","Form","Group","as","Label","column","sm","Control","e","preventDefault","target","value","Settings","changeLineLength","lineLenStr","parseInt","isNaN","this","resetForm","hideAdvanced","showAdvanced","prefix","postfix","updateSettings","consLogGenActions","RESET_VARS","SET_VARS","LogVars","resetVariables","rawVars","vars","split","t","trim","filter","Boolean","CommentActions","RESET_COMMENT","SET_COMMENT","comment","setComment","resetComment","rows","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","length","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","genPrefix","genPostfix","parsedVarsLines","v","variable","parseVar","outputText","l","join","parseComment","App","Container","varsInitialState","commentInitialState","reducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"wXAAaA,EAAkB,CAC7BC,YAAa,cACbC,eAAgB,iBAChBC,gBAAiB,kBACjBC,cAAe,yBACfC,cAAe,0B,qkBCHjB,IAAMC,EAAuB,CAC3BC,WAAY,UACZC,OAAQ,IACRC,WAAY,GACZC,sBAAsB,EACtBC,UAAW,eACXC,QAAS,KACTC,YAAa,IACbC,wBAAyB,KACzBC,0BAA2B,kBAC3BC,2BAA4B,iBAC5BC,cAAe,GACfC,eAAgB,IAGZC,EAAU,CACdC,QAAS,CACPb,WAAY,UACZI,UAAW,eACXC,QAAS,KACTC,YAAa,IACbC,wBAAyB,KACzBC,0BAA2B,kBAC3BC,2BAA4B,iBAC5BC,cAAe,GACfC,eAAgB,IAElBG,OAAQ,CACNd,WAAY,SACZI,UAAW,eACXC,QAAS,KACTC,YAAa,IACbC,wBAAyB,KACzBC,0BAA2B,gBAC3BC,2BAA4B,cAC5BC,cAAe,iCAEjBK,QAAShB,EACTiB,OAAQ,CACNhB,WAAY,WAIHiB,EAAUC,OAAOC,KAAKP,G,ICnC7BQ,E,iLACM,IAAD,OACP,OACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,sBACb,uCAEA,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAKF,UAAU,QAC9BN,EAAQS,KACP,SAACC,EAAGC,GACF,OAAI,EAAKC,MAAMC,eAAiBH,EACvB,kBAACI,EAAA,EAAD,CAAQC,IAAKJ,GAAID,GAIxB,kBAACI,EAAA,EAAD,CAAQE,QAAQ,kBAAkBD,IAAKJ,EAAGM,QAAS,kBAAM,EAAKL,MAAMM,aAAaR,KAAKA,OAK9F,mC,GApBcS,IAAMC,WAwCbC,eAVS,SAACC,GAAD,MAAY,CAClCT,aAAcS,EAAMC,SAASxC,eAGJ,SAACyC,GAAD,MAAe,CACxCN,aAAc,SAACO,GACbD,EFtCG,SAA4BC,GACjC,MAAO,CACLC,KAAMlD,EAAgBC,YACtBgD,UEmCSE,CAAmBF,QAIjBJ,CAA6ClB,G,gBC5C/CyB,EACJ,QADIA,EAED,WAuBGC,EApBS,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,MAAwD,IAAjDJ,YAAiD,MAA1CE,EAA0C,EAAxBG,EAAwB,EAAxBA,SAAanB,EAAW,2CAChF,OACE,kBAACoB,EAAA,EAAKC,MAAN,CAAYC,GAAI9B,IAAKE,UAAU,sBAC7B,kBAAC0B,EAAA,EAAKG,MAAN,CAAYC,QAAM,EAACC,GAAG,KAAKP,GAC3B,kBAACzB,EAAA,EAAD,CAAKgC,GAAG,KACN,kBAACL,EAAA,EAAKM,QAAN,eAAcJ,GAAIR,EAAMK,SAAU,SAACQ,GACjCA,EAAEC,iBACFT,EAASQ,EAAEE,OAAOC,SACb9B,O,kOCVT+B,E,2MAEJC,iBAAmB,SAACC,GAClB,IAAI5D,EAAa6D,SAASD,GAEtBE,MAAM9D,KACRA,EAAa,GAGf,EAAK2B,MAAMmB,SAAS,CAClB9C,gB,wEAIM,IAAD,OACP,OACE,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAEE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,yCACL,kBAACA,EAAA,EAAD,CAAKC,UAAU,cACb,kBAACQ,EAAA,EAAD,CAAQE,QAAQ,iBAAiBR,KAAK,KAAKS,QAAS+B,KAAKpC,MAAMqC,WAA/D,oBAKJ,kBAAC,EAAD,CACEnB,MAAM,wBACNC,SAAU,SAAC/C,GAAa,EAAK4B,MAAMmB,SAAS,CAAE/C,YAC9C0D,MAAOM,KAAKpC,MAAM5B,SAGpB,kBAAC,EAAD,CACE8C,MAAM,cACNC,SAAUiB,KAAKJ,iBACfF,MAAOM,KAAKpC,MAAM3B,aAGpB,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,kDACL,kBAACA,EAAA,EAAD,CAAKC,UAAU,cACX0C,KAAKpC,MAAM1B,qBACX,kBAAC4B,EAAA,EAAD,CAAQE,QAAQ,UAAUR,KAAK,KAAKS,QAAS+B,KAAKpC,MAAMsC,cAAxD,0BAEA,kBAACpC,EAAA,EAAD,CAAQE,QAAQ,kBAAkBR,KAAK,KAAKS,QAAS+B,KAAKpC,MAAMuC,cAAhE,4BAKLH,KAAKpC,MAAM1B,sBACV,6BACE,kBAAC,EAAD,CACE4C,MAAM,iBACNC,SAAU,SAACtC,GAAoB,EAAKmB,MAAMmB,SAAS,CAAEtC,mBACrDiD,MAAOM,KAAKpC,MAAMnB,gBAEpB,kBAAC,EAAD,CACEqC,MAAM,kBACNC,SAAU,SAACrC,GAAqB,EAAKkB,MAAMmB,SAAS,CAAErC,oBACtDgD,MAAOM,KAAKpC,MAAMlB,iBAEpB,kBAAC,EAAD,CACEoC,MAAM,aACNC,SAAU,SAAC5C,GAAgB,EAAKyB,MAAMmB,SAAS,CAAE5C,eACjDuD,MAAOM,KAAKpC,MAAMzB,YAEpB,kBAAC,EAAD,CACE2C,MAAM,WACNC,SAAU,SAAC3C,GAAc,EAAKwB,MAAMmB,SAAS,CAAE3C,aAC/CsD,MAAOM,KAAKpC,MAAMxB,UAEpB,kBAAC,EAAD,CACE0C,MAAM,eACNC,SAAU,SAAC1C,GAAkB,EAAKuB,MAAMmB,SAAS,CAAE1C,iBACnDqD,MAAOM,KAAKpC,MAAMvB,cAEpB,kBAAC,EAAD,CACEyC,MAAM,mCACNC,SAAU,SAACzC,GAA8B,EAAKsB,MAAMmB,SAAS,CAAEzC,6BAC/DoD,MAAOM,KAAKpC,MAAMtB,0BAEpB,kBAAC,EAAD,CACEwC,MAAM,0BACNC,SAAU,SAACqB,GAAa,EAAKxC,MAAMmB,SAAS,CAAExC,0BAA2B6D,KACzEV,MAAOM,KAAKpC,MAAMrB,4BAEpB,kBAAC,EAAD,CACEuC,MAAM,2BACNC,SAAU,SAACsB,GAAc,EAAKzC,MAAMmB,SAAS,CAAEvC,2BAA4B6D,KAC3EX,MAAOM,KAAKpC,MAAMpB,oC,GA1FX2B,IAAMC,WAyIdC,eAnBS,SAACC,GAAD,O,yVAAA,IACnBA,EAAMC,aAGgB,SAACC,GAAD,MAAe,CACxCO,SAAU,SAACR,GACTC,EJhHG,SAAwBD,GAC7B,MAAO,CACLG,KAAMlD,EAAgBG,gBACtB4C,YI6GS+B,CAAe/B,KAE1B4B,aAAc,WACZ3B,EJ3GK,CACLE,KAAMlD,EAAgBI,iBI4GxBqE,UAAW,WACTzB,EJ3HK,CACLE,KAAMlD,EAAgBE,kBI4HxBwE,aAAc,WACZ1B,EJ3GK,CACLE,KAAMlD,EAAgBK,oBI8GXwC,CAA6CsB,GClJ/CY,EAAoB,CAC/BC,WAAY,aACZC,SAAU,e,ICONC,E,iLACM,IAAD,OACP,OACE,kBAACtD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,0CACL,kBAACA,EAAA,EAAD,CAAKC,UAAU,cACb,kBAACQ,EAAA,EAAD,CAAQE,QAAQ,iBACdR,KAAK,KACLS,QAAS,WAAO,EAAKL,MAAM+C,mBAF7B,qBAQJ,kBAAC,EAAD,CACE7B,MAAM,wBACNC,SAAU,SAAC6B,GAAc,EAAKhD,MAAMmB,SAAS6B,IAC7ClB,MAAOM,KAAKpC,MAAMgD,gB,GAnBRzC,IAAMC,WAiDbC,eAdS,SAACC,GAAD,MAAY,CAClCuC,KAAMvC,EAAMuC,KAAKA,KACjBD,QAAStC,EAAMuC,KAAKD,YAGK,SAACpC,GAAD,MAAe,CACxCO,SAAU,SAAC8B,GDvCN,IAAiBD,ECwCpBpC,GDxCoBoC,ECwCHC,EDvCZ,CACLnC,KAAM6B,EAAkBE,SACxBG,UACAC,KAAMD,EAAQE,MAAM,WACjBrD,KAAI,SAAAsD,GAAC,OAAIA,EAAEC,UACXC,OAAOC,aCoCZP,eAAgB,WACdnC,EDhDK,CACLE,KAAM6B,EAAkBC,iBCmDbnC,CAGbqC,GC7DWS,EAAiB,CAC5BC,cAAe,gBACfC,YAAa,kBCOf,IA8CehD,eAbS,SAACC,GAAD,MAAY,CAClCgD,QAAShD,EAAMgD,YAGU,SAAC9C,GAAD,MAAe,CACxCO,SAAU,SAACuC,GACT9C,EDtCG,SAAoB8C,GACzB,MAAO,CACL5C,KAAMyC,EAAeE,YACrBC,WCmCSC,CAAWD,KAEtBE,aAAc,WACZhD,ED7CK,CACLE,KAAMyC,EAAeC,oBCgDV/C,EA9CC,SAACT,GACf,OACE,kBAACR,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,wCACL,kBAACA,EAAA,EAAD,CAAKC,UAAU,cACb,kBAACQ,EAAA,EAAD,CAAQE,QAAQ,iBACdR,KAAK,KACLS,QAAS,WAAOL,EAAM4D,iBAFxB,mBAQJ,kBAAC,EAAD,CACE1C,MAAM,cACNJ,KAAME,EACNG,SAAUnB,EAAMmB,SAChBW,MAAO9B,EAAM0D,QACbG,KAAM,S,QC7Bd,SAASC,EAAwBnD,EAAUoD,GACzC,MAAM,GAAN,OAAUpD,EAASpC,WAAnB,OAA+BwF,GAA/B,OAAsCpD,EAASnC,SAGjD,SAASwF,EAA0BrD,EAAUsD,GAC3C,OAAOtD,EAASlC,YAAcwF,EAAetD,EAASlC,YAoBxD,SAASyF,EAA0CvD,EAAUoD,GAC3D,IAEII,EApBN,SAAqCxD,EAAUoD,GAC7C,IAGMK,EAHYzD,EAAStC,WACR0F,EAAKM,OAEa,EAErC,OAAID,GAAO,EACFL,EAGUpD,EAASvC,OAAOkG,OAAOC,KAAKC,MAAMJ,EAAM,IAC3D,IAAML,EAAO,IACbpD,EAASvC,OAAOkG,OAAOC,KAAKE,KAAKL,EAAM,IAMpBM,CAA4B/D,EAAUoD,GAQzD,OAJIpD,EAASlC,cACX0F,EAAuBA,EAAqBQ,QAAQ,IAAIC,OAAOjE,EAASlC,YAAa,MAA9D,YAA0EkC,EAASlC,eAGrGqF,EACLnD,EACAqD,EAA0BrD,EAAUwD,IAIjC,SAASU,EAAelE,GAC7B,IAAMmE,EAAYd,EAA0BrD,EAAUA,EAASvC,OAAOkG,OAAO3D,EAAStC,aAEtF,OAAOyF,EAAwBnD,EAAUmE,G,UCmB5BrE,eANS,SAACC,GAAD,MAAY,CAClCuC,KAAMvC,EAAMuC,KAAKA,KACjBS,QAAShD,EAAMgD,QACf/C,SAAUD,EAAMC,YAGHF,EAvDA,SAAC,GAAiC,IAA/BwC,EAA8B,EAA9BA,KAAMS,EAAwB,EAAxBA,QAAS/C,EAAe,EAAfA,SAEzBoE,EAAYpE,EAAS9B,cACrBmG,EAAarE,EAAS7B,eACtBgG,EAAYD,EAAelE,GAC3BsE,EAAkBhC,EAAKpD,KAAI,SAAAqF,GAAC,OD4C7B,SAAkBvE,EAAUwE,GACjC,OAAOrB,EAAwBnD,EAC7BqD,EAA0BrD,EAAD,UAAcA,EAASvC,OAAvB,YAAiC+G,EAAjC,OAAzB,UACGxE,EAASjC,yBADZ,UAEGiC,EAAShC,2BAFZ,OAEwCwG,GAFxC,OAEmDxE,EAAS/B,6BChDvBwG,CAASzE,EAAUuE,MAGpDG,EAAU,CACdN,EACAD,ED6BG,SAAsBnE,EAAU+C,GACrC,OAAOA,EAAQR,MAAM,MAClBrD,KAAI,SAAAyF,GAAC,OAAIA,EAAElC,UACXvD,KAAI,SAACyF,GACJ,OAAIA,EAAUpB,EAA0CvD,EAAU2E,GAC3DT,EAAelE,MAEvB4E,KAAK,MCxCcC,CAAa7E,EAAU+C,GAM3CoB,GAJc,mBAKXG,GALW,CAMbA,EAAgBZ,OAAS,EAAKS,EAAY,GAC3CE,IAGF,OACE,yBAAKtF,UAAU,QACb,yBAAKA,UAAU,aACb,8BACG2F,EAAWhC,OAAOC,SAASzD,KAAI,SAACyF,EAAGvF,GAAJ,OAC9B,yBAAKI,IAAKJ,GAAIuF,YCNXG,EAbH,WACV,OACE,kBAACC,EAAA,EAAD,KACE,sDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,8NCjBN,IAAMC,EAAmB,CACvB1C,KAAM,GACND,QAAS,ICFX,IAAM4C,EAAsB,eCI5B,IAMeC,EANCC,YAAgB,CAC9BnF,SbwCK,WAAoD,IAAlCD,EAAiC,uDAAzB3B,EAAQG,QAAS6G,EAAQ,uCACxD,OAAQA,EAAOjF,MACb,KAAKlD,EAAgBC,YACnB,OAAO,EAAP,GACK6C,EADL,GAEM3B,EAAQgH,EAAOlF,SAEvB,KAAKjD,EAAgBE,eACnB,OAAO,EAAP,GACKI,GAEP,KAAKN,EAAgBG,gBACnB,OAAO,EAAP,GACK2C,EADL,GAEM3B,EAAQI,OAFd,GAGK4G,EAAOpF,UAEd,KAAK/C,EAAgBI,cACnB,OAAO,EAAP,GACK0C,EADL,CAEEpC,sBAAsB,IAE1B,KAAKV,EAAgBK,cACnB,OAAO,EAAP,GACKyC,EADL,CAEEpC,sBAAsB,IAE1B,QACE,OAAOoC,IanEXuC,KFDK,WAAiD,IAAnCvC,EAAkC,uDAA1BiF,EAAkBI,EAAQ,uCACrD,OAAQA,EAAOjF,MACb,KAAK6B,EAAkBC,WACrB,O,yVAAO,IACF+C,GAEP,KAAKhD,EAAkBE,SACrB,MAAO,CACLI,KAAK,YAAK8C,EAAO9C,MACjBD,QAAS+C,EAAO/C,SAEpB,QACE,OAAOtC,IEVXgD,QDLK,WAAuD,IAAtChD,EAAqC,uDAA7BkF,EAAqBG,EAAQ,uCAC3D,OAAQA,EAAOjF,MACb,KAAKyC,EAAeC,cAClB,OAAOoC,EACT,KAAKrC,EAAeE,YAClB,OAAOsC,EAAOrC,QAChB,QACE,OAAOhD,MEDPsF,G,MCCmB,WACvB,IACE,IAAMC,EAAkBC,aAAaC,QAbd,WAcvB,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAMK,GAEN,YADAC,QAAQC,IAAI,yCAA0CF,IDTnCG,IAEjBC,EAAQC,YACZC,EACAZ,EACAa,OAAOC,8BAAgCD,OAAOC,gCAGhDJ,EAAMK,WAAU,YChBS,SAACrG,GACxB,IACE,IAAMuF,EAAkBG,KAAKY,UAAUtG,GACvCwF,aAAae,QALU,UAKkBhB,GACzC,MAAOK,GACPC,QAAQC,IAAI,yCAA0CF,IDYxDY,CAAUR,EAAMS,eAGlBC,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,OACWY,SAASC,eAAe,W","file":"static/js/main.a4ed56a0.chunk.js","sourcesContent":["export const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(settings) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    settings,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","import { SettingsActions } from './Settings.actions';\n\nconst settingsInitialState = {\n  presetType: 'DEFAULT',\n  filler: '*',\n  lineLength: 60,\n  showAdvancedSettings: false,\n  lineStart: 'console.log(',\n  lineEnd: ');',\n  charEscaper: \"'\",\n  variableConcatenateChar: \", \",\n  variableWrapperCodePrefix: \"JSON.stringify(\",\n  variableWrapperCodePostfix: \", null, '\\\\t')\",\n  generalPrefix: \"\",\n  generalPostfix: \"\",\n};\n\nconst presets = {\n  BROWSER: {\n    presetType: 'BROWSER',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: \", \",\n    variableWrapperCodePrefix: \"JSON.stringify(\",\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: \"\",\n    generalPostfix: \"\",\n  },\n  NODEJS: {\n    presetType: 'NODEJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: \", \",\n    variableWrapperCodePrefix: \"util.inspect(\",\n    variableWrapperCodePostfix: \", false, 5)\",\n    generalPrefix: \"const util = require('util');\",\n  },\n  DEFAULT: settingsInitialState,\n  CUSTOM: {\n    presetType: 'CUSTOM',\n  },\n};\n\nexport const PRESETS = Object.keys(presets);\n\nexport function settings(state = presets.DEFAULT, action) {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        ...(presets[action.preset])\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        ...(presets.CUSTOM),\n        ...action.settings,\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { loadSettingsPreset } from '../Settings/Settings.actions';\nimport { PRESETS } from '../Settings/Settings.reducers';\n\nclass Presets extends React.Component {\n  render() {\n    return (\n    <Row>\n      <Col className=\"d-flex flex-column\">\n        <h3>Presets</h3>\n\n        <ButtonGroup size=\"sm\" className=\"mt-3\">\n          {PRESETS.map(\n            (p, k) => {\n              if (this.props.activePreset === p) {\n                return <Button key={k}>{p}</Button>;\n              }\n\n              return (\n                <Button variant='outline-primary' key={k} onClick={() => this.props.changePreset(p)}>{p}</Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <br />\n      </Col>\n    </Row>);\n  }\n}\n\nPresets.propTypes = {\n  changePreset: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  activePreset: state.settings.presetType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  changePreset: (preset) => {\n    dispatch(loadSettingsPreset(preset));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Presets);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport const INPUT_TYPE = {\n  INPUT: 'input',\n  TEXTAREA: 'textarea'\n}\n\nconst HorizontalInput = ({label, type = INPUT_TYPE.INPUT, onChange, ...props}) => {\n  return (\n    <Form.Group as={Row} className='align-items-center'>\n      <Form.Label column sm=\"3\">{label}</Form.Label>\n      <Col sm=\"9\">\n        <Form.Control as={type} onChange={(e) => {\n          e.preventDefault();\n          onChange(e.target.value);\n        }} {...props} />\n      </Col>\n    </Form.Group>\n  );\n};\n\nHorizontalInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(Object.values(INPUT_TYPE)),\n};\n\nexport default HorizontalInput;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport HorizontalInput from '../Form/HorizontalInput';\nimport { resetSettings, updateSettings, showAdvancedSettings, hideAdvancedSettings } from './Settings.actions';\n\nclass Settings extends React.Component {\n\n  changeLineLength = (lineLenStr) => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    this.props.onChange({\n      lineLength,\n    });\n  }\n\n  render() {\n    return (\n      <Row>\n        <Col>\n\n          <Row>\n            <Col><h3>Settings</h3></Col>\n            <Col className='text-right'>\n              <Button variant='outline-danger' size='sm' onClick={this.props.resetForm}>Reset settings</Button>\n            </Col>\n          </Row>\n\n\n          <HorizontalInput\n            label='Char to use as filler'\n            onChange={(filler) => { this.props.onChange({ filler }) }}\n            value={this.props.filler}\n          />\n\n          <HorizontalInput\n            label='Line length'\n            onChange={this.changeLineLength}\n            value={this.props.lineLength}\n          />\n\n          <Row>\n            <Col><h3>Advanced settings</h3></Col>\n            <Col className='text-right'>\n              {(this.props.showAdvancedSettings) ? (\n                <Button variant='primary' size='sm' onClick={this.props.hideAdvanced}>Hide advanced settings</Button>\n              ) : (\n                <Button variant='outline-primary' size='sm' onClick={this.props.showAdvanced}>Show advanced settings</Button>\n              )}\n            </Col>\n          </Row>\n\n          {this.props.showAdvancedSettings && (\n            <div>\n              <HorizontalInput\n                label='General prefix'\n                onChange={(generalPrefix) => { this.props.onChange({ generalPrefix }) }}\n                value={this.props.generalPrefix}\n              />\n              <HorizontalInput\n                label='General postfix'\n                onChange={(generalPostfix) => { this.props.onChange({ generalPostfix }) }}\n                value={this.props.generalPostfix}\n              />\n              <HorizontalInput\n                label='Line start'\n                onChange={(lineStart) => { this.props.onChange({ lineStart }) }}\n                value={this.props.lineStart}\n              />\n              <HorizontalInput\n                label='Line end'\n                onChange={(lineEnd) => { this.props.onChange({ lineEnd }) }}\n                value={this.props.lineEnd}\n              />\n              <HorizontalInput\n                label='Char escaper'\n                onChange={(charEscaper) => { this.props.onChange({ charEscaper }) }}\n                value={this.props.charEscaper}\n              />\n              <HorizontalInput\n                label='Concatenate variable in log char'\n                onChange={(variableConcatenateChar) => { this.props.onChange({ variableConcatenateChar }) }}\n                value={this.props.variableConcatenateChar}\n              />\n              <HorizontalInput\n                label='Variable wrapper prefix'\n                onChange={(prefix) => { this.props.onChange({ variableWrapperCodePrefix: prefix }) }}\n                value={this.props.variableWrapperCodePrefix}\n              />\n              <HorizontalInput\n                label='Variable wrapper postfix'\n                onChange={(postfix) => { this.props.onChange({ variableWrapperCodePostfix: postfix }) }}\n                value={this.props.variableWrapperCodePostfix}\n              />\n            </div>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nSettings.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  showAdvanced: PropTypes.func.isRequired,\n  hideAdvanced: PropTypes.func.isRequired,\n\n  showAdvancedSettings: PropTypes.bool.isRequired,\n  filler: PropTypes.string.isRequired,\n  lineLength: PropTypes.number.isRequired,\n  lineStart: PropTypes.string.isRequired,\n  lineEnd: PropTypes.string.isRequired,\n  charEscaper: PropTypes.string.isRequired,\n  variableConcatenateChar: PropTypes.string.isRequired,\n  variableWrapperCodePrefix: PropTypes.string.isRequired,\n  variableWrapperCodePostfix: PropTypes.string.isRequired,\n  generalPrefix: PropTypes.string.isRequired,\n  generalPostfix: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  ...state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (settings) => {\n    dispatch(updateSettings(settings));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","export const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  SET_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\nexport function setVars(rawVars) {\n  return {\n    type: consLogGenActions.SET_VARS,\n    rawVars,\n    vars: rawVars.split(/[,; ]/ig)\n      .map(t => t.trim())\n      .filter(Boolean),\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { resetVars, setVars } from './LogVars.actions';\nimport HorizontalInput from '../Form/HorizontalInput';\nimport PropTypes from 'prop-types';\n\nclass LogVars extends React.Component {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col><h3>Variables</h3></Col>\n            <Col className='text-right'>\n              <Button variant='outline-danger'\n                size='sm'\n                onClick={() => {this.props.resetVariables()}}>\n                  Reset variables\n                </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Variable names to log\"\n            onChange={(rawVars) => { this.props.onChange(rawVars) }}\n            value={this.props.rawVars}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nLogVars.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  resetVariables: PropTypes.func.isRequired,\n\n  vars: PropTypes.arrayOf(PropTypes.string).isRequired,\n  rawVars: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  vars: state.vars.vars,\n  rawVars: state.vars.rawVars,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (vars) => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(LogVars);\n","export const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment(comment) {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PropTypes from 'prop-types';\nimport HorizontalInput, { INPUT_TYPE } from '../Form/HorizontalInput';\nimport { resetComment, setComment } from './Comment.actions';\n\nconst Comment = (props) => {\n  return (\n    <Row>\n    <Col>\n      <Row>\n        <Col><h3>Comment</h3></Col>\n        <Col className='text-right'>\n          <Button variant='outline-danger'\n            size='sm'\n            onClick={() => {props.resetComment()}}>\n              Reset comment\n          </Button>\n        </Col>\n      </Row>\n\n      <HorizontalInput\n        label='The comment'\n        type={INPUT_TYPE.TEXTAREA}\n        onChange={props.onChange}\n        value={props.comment}\n        rows={7}\n      />\n    </Col>\n  </Row>\n  );\n}\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  resetComment: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  comment: state.comment\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (comment) => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\n","function wrapLineInPreAndPostFix(settings, line) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings, stringToWrap) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings, line) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine = settings.filler.repeat(Math.floor(gap / 2)) +\n  ' ' + line + ' ' +\n  settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(settings, line) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(new RegExp(settings.charEscaper, 'ig'), `\\\\${settings.charEscaper}`);\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars)\n  );\n}\n\nexport function parseEmptyLine(settings) {\n  const emptyLine = wrapStringWithEscaperChar(settings, settings.filler.repeat(settings.lineLength));\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings, comment) {\n  return comment.split('\\n')\n    .map(l => l.trim())\n    .map((l) => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n')\n}\n\nexport function parseVar(settings, variable) {\n  return wrapLineInPreAndPostFix(settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n    `${settings.variableConcatenateChar}` +\n    `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\n\nconst Output = ({ vars, comment, settings }) => {\n\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map(v => (parseVar(settings, v)));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    (parsedVarsLines.length > 0) ? emptyLine : '',\n    genPostfix\n  ];\n\n  return (\n    <div className=\"card\">\n      <pre className=\"card-body\">\n        <code>\n          {outputText.filter(Boolean).map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n}\n\nOutput.propTypes = {\n  vars: PropTypes.arrayOf(PropTypes.string).isRequired,\n  comment: PropTypes.string.isRequired,\n  settings: PropTypes.shape({\n    filler: PropTypes.string,\n    lineLength: PropTypes.number,\n    showAdvancedSettings: PropTypes.bool,\n    lineStart: PropTypes.string,\n    lineEnd: PropTypes.string,\n    charEscaper: PropTypes.string,\n    variableConcatenateChar: PropTypes.string,\n    variableWrapperCodePrefix: PropTypes.string,\n    variableWrapperCodePostfix: PropTypes.string,\n    generalPrefix: PropTypes.string.isRequired,\n    generalPostfix: PropTypes.string.isRequired,\n  }),\n};\n\nconst mapStateToProps = (state) => ({\n  vars: state.vars.vars,\n  comment: state.comment,\n  settings: state.settings,\n});\n\nexport default connect(mapStateToProps)(Output);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Presets from './components/Presets/Presets';\nimport Settings from './components/Settings/Settings';\nimport LogVars from './components/LogVars/LogVars';\nimport Comment from './components/Comment/Comment';\nimport Output from './components/Output/Output';\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>JS Development helpers</h1>\n      <Presets />\n      <Settings />\n      <LogVars />\n      <Comment />\n      <Output />\n    </Container>\n  );\n};\n\nexport default App;\n","import { consLogGenActions } from './LogVars.actions';\n\nconst varsInitialState = {\n  vars: [],\n  rawVars: '',\n};\n\nexport function vars(state = varsInitialState, action) {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.SET_VARS:\n      return {\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n      };\n    default:\n      return state;\n  }\n}\n\n","import { CommentActions } from './Comment.actions';\n\nconst commentInitialState = 'your comment';\n\nexport function comment(state = commentInitialState, action) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n\n","import { combineReducers } from 'redux';\n\nimport { settings } from './components/Settings/Settings.reducers';\nimport { vars } from './components/LogVars/LogVars.reducers';\nimport { comment } from './components/Comment/Comment.reducers';\n\nconst reducer = combineReducers({\n  settings,\n  vars,\n  comment,\n});\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './rootReducer';\nimport { loadState, saveState } from './localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n}\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch(err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n}\n"],"sourceRoot":""}