{"version":3,"sources":["components/Settings/Settings.actions.ts","components/Settings/Settings.reducers.ts","components/Presets/Presets.component.tsx","components/Presets/Presets.container.ts","components/Form/HorizontalInput.js","components/Settings/Settings.component.tsx","components/Settings/Settings.container.ts","components/LogVars/LogVars.component.tsx","components/LogVars/LogVars.actions.ts","components/LogVars/LogVars.container.ts","components/Comment/Comment.actions.ts","components/Comment/Comment.container.ts","components/Comment/Comment.component.tsx","components/Output/helpers.ts","components/Output/Output.container.ts","components/Output/Output.component.tsx","App.tsx","components/LogVars/LogVars.reducers.ts","store/rootReducer.ts","components/Comment/Comment.reducers.ts","index.tsx","store/localStorage.js"],"names":["SettingsActions","PresetNames","settingsInitialState","currentPreset","DEFAULT","showAdvancedSettings","values","presetFullName","filler","lineLength","lineStart","lineEnd","charEscaper","variableConcatenateChar","variableWrapperCodePrefix","variableWrapperCodePostfix","generalPrefix","generalPostfix","presetsValues","BROWSER","NODEJS","REACT_RENDER","CUSTOM","getPreset","presetName","connect","state","activePreset","settings","dispatch","changePreset","preset","type","loadSettingsPreset","props","Row","Col","className","ButtonGroup","size","Object","map","key","Button","variant","onClick","INPUT_TYPE","HorizontalInput","label","onChange","Form","Group","as","Label","column","sm","Control","e","preventDefault","target","value","SettingsComponent","changeLineLength","lineLenStr","parseInt","isNaN","this","resetForm","hideAdvanced","showAdvanced","prefix","postfix","React","Component","newSettingsValues","updateSettings","LogVarsComponent","resetVariables","rawVars","consLogGenActions","vars","split","t","trim","filter","Boolean","CommentActions","comment","setComment","resetComment","newValue","rows","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","length","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","genPrefix","genPostfix","parsedVarsLines","v","variable","parseVar","outputText","l","join","parseComment","k","App","Container","varsInitialState","reducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cb16098.chunk.js","sourcesContent":["import { PresetNames } from \"./Settings.reducers\";\nimport { Settings } from \"./Settings.interface\";\n\nexport const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset: PresetNames) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(newSettingsValues: Partial<Settings>) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    newSettingsValues,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","import { SettingsActions } from './Settings.actions';\nimport { AnyAction } from 'redux';\nimport { Settings } from './Settings.interface';\n\nexport enum PresetNames {\n  BROWSER = 'BROWSER',\n  NODEJS = 'NODEJS',\n  REACT_RENDER = 'REACT_RENDER',\n  DEFAULT = 'DEFAULT',\n  CUSTOM = 'CUSTOM',\n};\n\nconst settingsInitialState = {\n  currentPreset: PresetNames.DEFAULT,\n  showAdvancedSettings: false,\n  values: {\n    presetFullName: 'Default',\n    filler: '*',\n    lineLength: 60,\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n};\n\nexport interface SettingsState {\n  currentPreset: PresetNames;\n  showAdvancedSettings: boolean;\n  values: Settings;\n};\n\n\nconst presetsValues: { \n  [key in PresetNames]: Partial<Settings> \n} = {\n  BROWSER: {\n    presetFullName: 'Browser',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n  NODEJS: {\n    presetFullName: 'NodeJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'util.inspect(',\n    variableWrapperCodePostfix: ', false, 5)',\n    generalPrefix: \"const util = require('util');\",\n    generalPostfix: '',\n  },\n  REACT_RENDER: {\n    presetFullName: 'React render() log',\n    lineStart: '',\n    lineEnd: '<br />',\n    charEscaper: '',\n    variableConcatenateChar: '',\n    variableWrapperCodePrefix: '{JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\n    generalPrefix: '<pre>',\n    generalPostfix: '</pre>',\n  },\n  DEFAULT: {\n    ...settingsInitialState.values,\n  },\n  CUSTOM: {\n    presetFullName: 'Custom',\n  },\n};\n\nexport function getPreset(presetName: PresetNames) {\n  return presetsValues[presetName];\n}\n\nexport function settings(state = settingsInitialState, action: AnyAction): SettingsState {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        currentPreset: action.preset,\n        values: {\n          ...state.values,\n          ...getPreset(action.preset),\n        },\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        currentPreset: PresetNames.CUSTOM,\n        values: {\n          ...state.values,\n          ...getPreset(PresetNames.CUSTOM),\n          ...action.newSettingsValues,\n        },\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport { PresetsComponentProps } from './Presets.interface';\nimport { PresetNames, getPreset } from '../Settings/Settings.reducers';\n\nexport const PresetsComponent: React.FC<PresetsComponentProps> = (props) => (\n  <Row>\n    <Col className=\"d-flex flex-column\">\n      <h3>Presets</h3>\n      <ButtonGroup size=\"sm\" className=\"mt-3\">\n        {Object.values(PresetNames).map((key) => (\n          <Button\n            key={key}\n            variant={(props.activePreset === key) ? 'primary' : 'outline-primary'}\n            onClick={() => props.changePreset(key)}\n          >\n            {getPreset(key).presetFullName}\n          </Button>\n        ))}\n      </ButtonGroup>\n      <br />\n    </Col>\n  </Row>\n);\n\n\n","import { connect } from \"react-redux\";\nimport { loadSettingsPreset } from \"../Settings/Settings.actions\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { PresetNames } from \"../Settings/Settings.reducers\";\nimport { PresetsComponent } from \"./Presets.component\";\n\nconst mapStateToProps = (state: RootState) => ({\n  activePreset: state.settings.currentPreset,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changePreset: (preset: PresetNames) => {\n    dispatch(loadSettingsPreset(preset));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PresetsComponent);\n","/**\n * This file is a bit retarded. It can not be converted to *.tsx file, \n * because of complains of Form.Control (from react-bootstrap) that does not\n * know how to handle spreaded properties.\n * \n * TODO: This helper component should be rewritten from scratch. \n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport const INPUT_TYPE = {\n  INPUT: 'input',\n  TEXTAREA: 'textarea',\n};\n\nconst HorizontalInput = ({\n  label,\n  type = INPUT_TYPE.INPUT,\n  onChange,\n  ...props\n}) => {\n  return (\n    <Form.Group as={Row} className=\"align-items-center\">\n      <Form.Label column sm=\"3\">\n        {label}\n      </Form.Label>\n      <Col sm=\"9\">\n        <Form.Control\n          as={type}\n          onChange={e => {\n            e.preventDefault();\n            onChange(e.target.value);\n          }}\n          {...props}\n        />\n      </Col>\n    </Form.Group>\n  );\n};\n\nHorizontalInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(Object.values(INPUT_TYPE)),\n};\n\nexport default HorizontalInput;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Settings } from './Settings.interface';\nimport HorizontalInput from '../Form/HorizontalInput';\n\nexport class SettingsComponent extends React.Component<any, any> {\n  changeLineLength = (lineLenStr: string) => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    this.props.onChange({\n      lineLength,\n    });\n  };\n\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={this.props.resetForm}\n              >\n                Reset settings\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Char to use as filler\"\n            onChange={(filler: Settings['filler']) => {\n              this.props.onChange({ filler });\n            }}\n            value={this.props.filler}\n          />\n\n          <HorizontalInput\n            label=\"Line length\"\n            onChange={this.changeLineLength}\n            value={this.props.lineLength}\n          />\n\n          <Row>\n            <Col>\n              <h3>Advanced settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              {this.props.showAdvancedSettings ? (\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  onClick={this.props.hideAdvanced}\n                >\n                  Hide advanced settings\n                </Button>\n              ) : (\n                  <Button\n                    variant=\"outline-primary\"\n                    size=\"sm\"\n                    onClick={this.props.showAdvanced}\n                  >\n                    Show advanced settings\n                  </Button>\n                )}\n            </Col>\n          </Row>\n\n          {this.props.showAdvancedSettings && (\n            <div>\n              <HorizontalInput\n                label=\"General prefix\"\n                onChange={(generalPrefix: Settings['generalPrefix']) => {\n                  this.props.onChange({ generalPrefix });\n                }}\n                value={this.props.generalPrefix}\n              />\n              <HorizontalInput\n                label=\"General postfix\"\n                onChange={(generalPostfix: Settings['generalPostfix']) => {\n                  this.props.onChange({ generalPostfix });\n                }}\n                value={this.props.generalPostfix}\n              />\n              <HorizontalInput\n                label=\"Line start\"\n                onChange={(lineStart: Settings['lineStart']) => {\n                  this.props.onChange({ lineStart });\n                }}\n                value={this.props.lineStart}\n              />\n              <HorizontalInput\n                label=\"Line end\"\n                onChange={(lineEnd: Settings['lineEnd']) => {\n                  this.props.onChange({ lineEnd });\n                }}\n                value={this.props.lineEnd}\n              />\n              <HorizontalInput\n                label=\"Char escaper\"\n                onChange={(charEscaper: Settings['charEscaper']) => {\n                  this.props.onChange({ charEscaper });\n                }}\n                value={this.props.charEscaper}\n              />\n              <HorizontalInput\n                label=\"Concatenate variable in log char\"\n                onChange={(variableConcatenateChar: Settings['variableConcatenateChar']) => {\n                  this.props.onChange({ variableConcatenateChar });\n                }}\n                value={this.props.variableConcatenateChar}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper prefix\"\n                onChange={(prefix: Settings['variableWrapperCodePrefix']) => {\n                  this.props.onChange({ variableWrapperCodePrefix: prefix });\n                }}\n                value={this.props.variableWrapperCodePrefix}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper postfix\"\n                onChange={(postfix: Settings['variableWrapperCodePostfix']) => {\n                  this.props.onChange({ variableWrapperCodePostfix: postfix });\n                }}\n                value={this.props.variableWrapperCodePostfix}\n              />\n            </div>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { SettingsComponent } from './Settings.component';\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { Settings } from \"./Settings.interface\";\nimport { updateSettings, resetSettings, showAdvancedSettings, hideAdvancedSettings } from \"./Settings.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  showAdvancedSettings: state.settings.showAdvancedSettings,\n  ...state.settings.values,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (newSettingsValues: Partial<Settings>) => {\n    dispatch(updateSettings(newSettingsValues));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsComponent);","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { LogVarsProps } from './LogVars.interface';\nimport { VarsState } from './LogVars.reducers';\nimport HorizontalInput from '../Form/HorizontalInput';\n\nexport class LogVarsComponent extends React.Component<LogVarsProps, any> {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Variables</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={() => {\n                  this.props.resetVariables();\n                }}\n              >\n                Reset variables\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Variable names to log\"\n            onChange={(rawVars: VarsState['rawVars']) => {\n              this.props.onChange(rawVars);\n            }}\n            value={this.props.rawVars}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n","import { VarsState } from \"./LogVars.reducers\";\n\nexport const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  SET_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\nexport function setVars(rawVars: VarsState['rawVars']) {\n  return {\n    type: consLogGenActions.SET_VARS,\n    rawVars,\n    vars: rawVars\n      .split(/[,; ]/gi)\n      .map(t => t.trim())\n      .filter(Boolean),\n  };\n}\n","import { connect } from \"react-redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { Dispatch } from \"redux\";\nimport { VarsState } from \"./LogVars.reducers\";\nimport { LogVarsComponent } from \"./LogVars.component\";\nimport { setVars, resetVars } from \"./LogVars.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  vars: state.vars.vars,\n  rawVars: state.vars.rawVars,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (vars: VarsState['rawVars']) => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogVarsComponent);\n","import { CommentState } from \"./Comment.reducers\";\n\nexport const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment() {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment: CommentState) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { RootState } from \"../../store/rootReducer\";\nimport { CommentState } from \"./Comment.reducers\";\nimport { CommentComponent } from \"./Comment.component\";\nimport { setComment, resetComment } from \"./Comment.actions\";\n\nconst mapStateToProps = (state: RootState) => ({\n  comment: state.comment,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onChange: (comment: CommentState) => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentComponent);","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CommentProps } from './Comment.interface';\nimport HorizontalInput, { INPUT_TYPE } from '../Form/HorizontalInput';\n\nexport const CommentComponent: React.FC<CommentProps> = props => {\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Comment</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                props.resetComment();\n              }}\n            >\n              Reset comment\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"The comment\"\n          type={INPUT_TYPE.TEXTAREA}\n          onChange={(newValue: string) => props.onChange(newValue)}\n          value={props.comment}\n          rows={7}\n        />\n      </Col>\n    </Row>\n  );\n};\n\n\n\n","import { Settings } from \"../Settings/Settings.interface\";\n\nfunction wrapLineInPreAndPostFix(settings: Settings, line: string) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings: Settings, stringToWrap: string) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings: Settings, line: string) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine =\n    settings.filler.repeat(Math.floor(gap / 2)) +\n    ' ' +\n    line +\n    ' ' +\n    settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(settings: Settings, line: string) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(\n      new RegExp(settings.charEscaper, 'ig'),\n      `\\\\${settings.charEscaper}`,\n    );\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\n  );\n}\n\nexport function parseEmptyLine(settings: Settings) {\n  const emptyLine = wrapStringWithEscaperChar(\n    settings,\n    settings.filler.repeat(settings.lineLength),\n  );\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings: Settings, comment: string) {\n  return comment\n    .split('\\n')\n    .map(l => l.trim())\n    .map(l => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n');\n}\n\nexport function parseVar(settings: Settings, variable: string) {\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n      `${settings.variableConcatenateChar}` +\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\n  );\n}\n","import { connect } from \"react-redux\";\nimport { OutputComponent } from './Output.component';\nimport { RootState } from \"../../store/rootReducer\";\n\nconst mapStateToProps = (state: RootState) => ({\n  vars: state.vars.vars,\n  comment: state.comment,\n  settings: state.settings.values,\n});\n\nexport default connect(mapStateToProps)(OutputComponent);\n","import React from 'react';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\nimport { OutputComponentProps } from './Output.interface';\n\nexport const OutputComponent: React.FC<OutputComponentProps> = ({ vars, comment, settings }) => {\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map(v => parseVar(settings, v));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    parsedVarsLines.length > 0 ? emptyLine : '',\n    genPostfix,\n  ];\n\n  return (\n    <div className=\"card\">\n      <pre className=\"card-body\">\n        <code>\n          {outputText.filter(Boolean).map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n};\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Presets from './components/Presets/Presets.container';\nimport Settings from './components/Settings/Settings.container';\nimport LogVars from './components/LogVars/LogVars.container';\nimport Comment from './components/Comment/Comment.container';\nimport Output from './components/Output/Output.container';\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>JS Development helpers</h1>\n      <Presets />\n      <Settings />\n      <LogVars />\n      <Comment />\n      <Output />\n    </Container>\n  );\n};\n\nexport default App;\n","import { consLogGenActions } from './LogVars.actions';\nimport { AnyAction } from 'redux';\n\nconst varsInitialState: VarsState = {\n  vars: [],\n  rawVars: '',\n};\n\nexport interface VarsState {\n  vars: string[];\n  rawVars: string;\n};\n\nexport function vars(state = varsInitialState, action: AnyAction): VarsState {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.SET_VARS:\n      return {\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { settings, SettingsState } from '../components/Settings/Settings.reducers';\nimport { vars, VarsState } from '../components/LogVars/LogVars.reducers';\nimport { comment, CommentState } from '../components/Comment/Comment.reducers';\n\nconst reducer = combineReducers({\n  settings,\n  vars,\n  comment,\n});\n\nexport interface RootState {\n  settings: SettingsState,\n  vars: VarsState,\n  comment: CommentState,\n};\n\nexport default reducer;\n","import { CommentActions } from './Comment.actions';\nimport { AnyAction } from 'redux';\n\nconst commentInitialState = 'your comment';\n\nexport type CommentState = string;\n\nexport function comment(state = commentInitialState, action: AnyAction) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './store/rootReducer';\nimport { loadState, saveState } from './store/localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n};\n"],"sourceRoot":""}