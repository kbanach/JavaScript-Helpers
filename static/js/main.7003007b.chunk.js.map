{"version":3,"sources":["components/Settings/Settings.actions.js","components/Settings/Settings.reducers.js","components/Presets/Presets.js","components/Form/HorizontalInput.js","components/Settings/Settings.js","components/LogVars/LogVars.actions.js","components/LogVars/LogVars.js","components/Comment/Comment.actions.js","components/Comment/Comment.js","components/Output/helpers.js","components/Output/Output.js","App.js","components/LogVars/LogVars.reducers.js","components/Comment/Comment.reducers.js","rootReducer.js","index.js","localStorage.js"],"names":["SettingsActions","LOAD_PRESET","RESET_SETTINGS","UPDATE_SETTINGS","SHOW_ADVANCED","HIDE_ADVANCED","settingsInitialState","currentPreset","showAdvancedSettings","values","presetType","filler","lineLength","lineStart","lineEnd","charEscaper","variableConcatenateChar","variableWrapperCodePrefix","variableWrapperCodePostfix","generalPrefix","generalPostfix","presetsValues","BROWSER","NODEJS","REACT_RENDER","DEFAULT","CUSTOM","PRESETS","Object","keys","reduce","prevValue","newValue","Presets","buttons","key","props","activePreset","push","Button","variant","onClick","changePreset","Row","Col","className","ButtonGroup","size","React","Component","connect","state","settings","dispatch","preset","type","loadSettingsPreset","INPUT_TYPE","HorizontalInput","label","onChange","Form","Group","as","Label","column","sm","Control","e","preventDefault","target","value","Settings","changeLineLength","lineLenStr","parseInt","isNaN","this","resetForm","hideAdvanced","showAdvanced","prefix","postfix","newSettingsValues","updateSettings","consLogGenActions","RESET_VARS","SET_VARS","LogVars","resetVariables","rawVars","vars","split","map","t","trim","filter","Boolean","CommentActions","RESET_COMMENT","SET_COMMENT","comment","setComment","resetComment","rows","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","length","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","genPrefix","genPostfix","parsedVarsLines","v","variable","parseVar","outputText","l","join","parseComment","k","App","Container","varsInitialState","commentInitialState","reducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7003007b.chunk.js","sourcesContent":["export const SettingsActions = {\n  LOAD_PRESET: 'LOAD_PRESET',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\n};\n\nexport function loadSettingsPreset(preset) {\n  return {\n    type: SettingsActions.LOAD_PRESET,\n    preset,\n  };\n}\n\nexport function resetSettings() {\n  return {\n    type: SettingsActions.RESET_SETTINGS,\n  };\n}\n\nexport function updateSettings(newSettingsValues) {\n  return {\n    type: SettingsActions.UPDATE_SETTINGS,\n    newSettingsValues,\n  };\n}\n\nexport function showAdvancedSettings() {\n  return {\n    type: SettingsActions.SHOW_ADVANCED,\n  };\n}\n\nexport function hideAdvancedSettings() {\n  return {\n    type: SettingsActions.HIDE_ADVANCED,\n  };\n}\n","import { SettingsActions } from './Settings.actions';\n\nconst settingsInitialState = {\n  currentPreset: 'DEFAULT',\n  showAdvancedSettings: false,\n  values: {\n    presetType: 'Default',\n    filler: '*',\n    lineLength: 60,\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n};\n\nconst presetsValues = {\n  BROWSER: {\n    presetType: 'Browser',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\n    generalPrefix: '',\n    generalPostfix: '',\n  },\n  NODEJS: {\n    presetType: 'NodeJS',\n    lineStart: 'console.log(',\n    lineEnd: ');',\n    charEscaper: \"'\",\n    variableConcatenateChar: ', ',\n    variableWrapperCodePrefix: 'util.inspect(',\n    variableWrapperCodePostfix: ', false, 5)',\n    generalPrefix: \"const util = require('util');\",\n    generalPostfix: '',\n  },\n  REACT_RENDER: {\n    presetType: 'React render() log',\n    lineStart: '',\n    lineEnd: '<br />',\n    charEscaper: '',\n    variableConcatenateChar: '',\n    variableWrapperCodePrefix: '{JSON.stringify(',\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\n    generalPrefix: '<pre>',\n    generalPostfix: '</pre>',\n  },\n  DEFAULT: {\n    ...settingsInitialState.values,\n  },\n  CUSTOM: {\n    presetType: 'Custom',\n  },\n};\n\nexport const PRESETS = Object.keys(presetsValues).reduce(\n  (prevValue, newValue) => {\n    return { ...prevValue, [newValue]: presetsValues[newValue].presetType };\n  },\n  {},\n);\n\nexport function settings(state = settingsInitialState, action) {\n  switch (action.type) {\n    case SettingsActions.LOAD_PRESET:\n      return {\n        ...state,\n        currentPreset: action.preset,\n        values: {\n          ...state.values,\n          ...presetsValues[action.preset],\n        },\n      };\n    case SettingsActions.RESET_SETTINGS:\n      return {\n        ...settingsInitialState,\n      };\n    case SettingsActions.UPDATE_SETTINGS:\n      return {\n        ...state,\n        values: {\n          ...state.values,\n          ...presetsValues.CUSTOM,\n          ...action.newSettingsValues,\n        },\n      };\n    case SettingsActions.SHOW_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: true,\n      };\n    case SettingsActions.HIDE_ADVANCED:\n      return {\n        ...state,\n        showAdvancedSettings: false,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { loadSettingsPreset } from '../Settings/Settings.actions';\nimport { PRESETS } from '../Settings/Settings.reducers';\n\nclass Presets extends React.Component {\n  render() {\n    const buttons = [];\n\n    for (const key of Object.keys(PRESETS)) {\n      if (this.props.activePreset === key) {\n        buttons.push(<Button key={key}>{PRESETS[key]}</Button>);\n      } else {\n        buttons.push(\n          <Button\n            key={key}\n            variant=\"outline-primary\"\n            onClick={() => this.props.changePreset(key)}\n          >\n            {PRESETS[key]}\n          </Button>,\n        );\n      }\n    }\n\n    return (\n      <Row>\n        <Col className=\"d-flex flex-column\">\n          <h3>Presets</h3>\n          <ButtonGroup size=\"sm\" className=\"mt-3\">\n            {buttons}\n          </ButtonGroup>\n          <br />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nPresets.propTypes = {\n  changePreset: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  activePreset: state.settings.currentPreset,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changePreset: preset => {\n    dispatch(loadSettingsPreset(preset));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Presets);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport const INPUT_TYPE = {\n  INPUT: 'input',\n  TEXTAREA: 'textarea',\n};\n\nconst HorizontalInput = ({\n  label,\n  type = INPUT_TYPE.INPUT,\n  onChange,\n  ...props\n}) => {\n  return (\n    <Form.Group as={Row} className=\"align-items-center\">\n      <Form.Label column sm=\"3\">\n        {label}\n      </Form.Label>\n      <Col sm=\"9\">\n        <Form.Control\n          as={type}\n          onChange={e => {\n            e.preventDefault();\n            onChange(e.target.value);\n          }}\n          {...props}\n        />\n      </Col>\n    </Form.Group>\n  );\n};\n\nHorizontalInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(Object.values(INPUT_TYPE)),\n};\n\nexport default HorizontalInput;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport HorizontalInput from '../Form/HorizontalInput';\nimport {\n  resetSettings,\n  updateSettings,\n  showAdvancedSettings,\n  hideAdvancedSettings,\n} from './Settings.actions';\n\nclass Settings extends React.Component {\n  changeLineLength = lineLenStr => {\n    let lineLength = parseInt(lineLenStr);\n\n    if (isNaN(lineLength)) {\n      lineLength = 0;\n    }\n\n    this.props.onChange({\n      lineLength,\n    });\n  };\n\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={this.props.resetForm}\n              >\n                Reset settings\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Char to use as filler\"\n            onChange={filler => {\n              this.props.onChange({ filler });\n            }}\n            value={this.props.filler}\n          />\n\n          <HorizontalInput\n            label=\"Line length\"\n            onChange={this.changeLineLength}\n            value={this.props.lineLength}\n          />\n\n          <Row>\n            <Col>\n              <h3>Advanced settings</h3>\n            </Col>\n            <Col className=\"text-right\">\n              {this.props.showAdvancedSettings ? (\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  onClick={this.props.hideAdvanced}\n                >\n                  Hide advanced settings\n                </Button>\n              ) : (\n                <Button\n                  variant=\"outline-primary\"\n                  size=\"sm\"\n                  onClick={this.props.showAdvanced}\n                >\n                  Show advanced settings\n                </Button>\n              )}\n            </Col>\n          </Row>\n\n          {this.props.showAdvancedSettings && (\n            <div>\n              <HorizontalInput\n                label=\"General prefix\"\n                onChange={generalPrefix => {\n                  this.props.onChange({ generalPrefix });\n                }}\n                value={this.props.generalPrefix}\n              />\n              <HorizontalInput\n                label=\"General postfix\"\n                onChange={generalPostfix => {\n                  this.props.onChange({ generalPostfix });\n                }}\n                value={this.props.generalPostfix}\n              />\n              <HorizontalInput\n                label=\"Line start\"\n                onChange={lineStart => {\n                  this.props.onChange({ lineStart });\n                }}\n                value={this.props.lineStart}\n              />\n              <HorizontalInput\n                label=\"Line end\"\n                onChange={lineEnd => {\n                  this.props.onChange({ lineEnd });\n                }}\n                value={this.props.lineEnd}\n              />\n              <HorizontalInput\n                label=\"Char escaper\"\n                onChange={charEscaper => {\n                  this.props.onChange({ charEscaper });\n                }}\n                value={this.props.charEscaper}\n              />\n              <HorizontalInput\n                label=\"Concatenate variable in log char\"\n                onChange={variableConcatenateChar => {\n                  this.props.onChange({ variableConcatenateChar });\n                }}\n                value={this.props.variableConcatenateChar}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper prefix\"\n                onChange={prefix => {\n                  this.props.onChange({ variableWrapperCodePrefix: prefix });\n                }}\n                value={this.props.variableWrapperCodePrefix}\n              />\n              <HorizontalInput\n                label=\"Variable wrapper postfix\"\n                onChange={postfix => {\n                  this.props.onChange({ variableWrapperCodePostfix: postfix });\n                }}\n                value={this.props.variableWrapperCodePostfix}\n              />\n            </div>\n          )}\n        </Col>\n      </Row>\n    );\n  }\n}\n\nSettings.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  showAdvanced: PropTypes.func.isRequired,\n  hideAdvanced: PropTypes.func.isRequired,\n\n  showAdvancedSettings: PropTypes.bool.isRequired,\n  filler: PropTypes.string.isRequired,\n  lineLength: PropTypes.number.isRequired,\n  lineStart: PropTypes.string.isRequired,\n  lineEnd: PropTypes.string.isRequired,\n  charEscaper: PropTypes.string.isRequired,\n  variableConcatenateChar: PropTypes.string.isRequired,\n  variableWrapperCodePrefix: PropTypes.string.isRequired,\n  variableWrapperCodePostfix: PropTypes.string.isRequired,\n  generalPrefix: PropTypes.string.isRequired,\n  generalPostfix: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  showAdvancedSettings: state.settings.showAdvancedSettings,\n  ...state.settings.values,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: newSettingsValues => {\n    dispatch(updateSettings(newSettingsValues));\n  },\n  showAdvanced: () => {\n    dispatch(showAdvancedSettings());\n  },\n  resetForm: () => {\n    dispatch(resetSettings());\n  },\n  hideAdvanced: () => {\n    dispatch(hideAdvancedSettings());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","export const consLogGenActions = {\n  RESET_VARS: 'RESET_VARS',\n  SET_VARS: 'UPDATE_VARS',\n};\n\nexport function resetVars() {\n  return {\n    type: consLogGenActions.RESET_VARS,\n  };\n}\n\nexport function setVars(rawVars) {\n  return {\n    type: consLogGenActions.SET_VARS,\n    rawVars,\n    vars: rawVars\n      .split(/[,; ]/gi)\n      .map(t => t.trim())\n      .filter(Boolean),\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { resetVars, setVars } from './LogVars.actions';\nimport HorizontalInput from '../Form/HorizontalInput';\nimport PropTypes from 'prop-types';\n\nclass LogVars extends React.Component {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Row>\n            <Col>\n              <h3>Variables</h3>\n            </Col>\n            <Col className=\"text-right\">\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={() => {\n                  this.props.resetVariables();\n                }}\n              >\n                Reset variables\n              </Button>\n            </Col>\n          </Row>\n\n          <HorizontalInput\n            label=\"Variable names to log\"\n            onChange={rawVars => {\n              this.props.onChange(rawVars);\n            }}\n            value={this.props.rawVars}\n          />\n        </Col>\n      </Row>\n    );\n  }\n}\n\nLogVars.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  resetVariables: PropTypes.func.isRequired,\n\n  vars: PropTypes.arrayOf(PropTypes.string).isRequired,\n  rawVars: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  vars: state.vars.vars,\n  rawVars: state.vars.rawVars,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: vars => {\n    dispatch(setVars(vars));\n  },\n  resetVariables: () => {\n    dispatch(resetVars());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogVars);\n","export const CommentActions = {\n  RESET_COMMENT: 'RESET_COMMENT',\n  SET_COMMENT: 'UPDATE_COMMENT',\n};\n\nexport function resetComment(comment) {\n  return {\n    type: CommentActions.RESET_COMMENT,\n  };\n}\nexport function setComment(comment) {\n  return {\n    type: CommentActions.SET_COMMENT,\n    comment,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PropTypes from 'prop-types';\nimport HorizontalInput, { INPUT_TYPE } from '../Form/HorizontalInput';\nimport { resetComment, setComment } from './Comment.actions';\n\nconst Comment = props => {\n  return (\n    <Row>\n      <Col>\n        <Row>\n          <Col>\n            <h3>Comment</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              onClick={() => {\n                props.resetComment();\n              }}\n            >\n              Reset comment\n            </Button>\n          </Col>\n        </Row>\n\n        <HorizontalInput\n          label=\"The comment\"\n          type={INPUT_TYPE.TEXTAREA}\n          onChange={props.onChange}\n          value={props.comment}\n          rows={7}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  resetComment: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  comment: state.comment,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: comment => {\n    dispatch(setComment(comment));\n  },\n  resetComment: () => {\n    dispatch(resetComment());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\n","function wrapLineInPreAndPostFix(settings, line) {\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\n}\n\nfunction wrapStringWithEscaperChar(settings, stringToWrap) {\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\n}\n\nfunction centerTextAndFillGapsAround(settings, line) {\n  const targetLen = settings.lineLength;\n  const currentLen = line.length;\n\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\n\n  if (gap <= 0) {\n    return line;\n  }\n\n  const filledLine =\n    settings.filler.repeat(Math.floor(gap / 2)) +\n    ' ' +\n    line +\n    ' ' +\n    settings.filler.repeat(Math.ceil(gap / 2));\n\n  return filledLine;\n}\n\nfunction transformStringToCenteredAndEscapedString(settings, line) {\n  const filledLine = centerTextAndFillGapsAround(settings, line);\n\n  let lineWithEscapedChars = filledLine;\n\n  if (settings.charEscaper) {\n    lineWithEscapedChars = lineWithEscapedChars.replace(\n      new RegExp(settings.charEscaper, 'ig'),\n      `\\\\${settings.charEscaper}`,\n    );\n  }\n\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\n  );\n}\n\nexport function parseEmptyLine(settings) {\n  const emptyLine = wrapStringWithEscaperChar(\n    settings,\n    settings.filler.repeat(settings.lineLength),\n  );\n\n  return wrapLineInPreAndPostFix(settings, emptyLine);\n}\n\nexport function parseComment(settings, comment) {\n  return comment\n    .split('\\n')\n    .map(l => l.trim())\n    .map(l => {\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\n      return parseEmptyLine(settings);\n    })\n    .join('\\n');\n}\n\nexport function parseVar(settings, variable) {\n  return wrapLineInPreAndPostFix(\n    settings,\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\n      `${settings.variableConcatenateChar}` +\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\nimport './Output.css';\n\nconst Output = ({ vars, comment, settings }) => {\n  const genPrefix = settings.generalPrefix;\n  const genPostfix = settings.generalPostfix;\n  const emptyLine = parseEmptyLine(settings);\n  const parsedVarsLines = vars.map(v => parseVar(settings, v));\n  const parsedComment = parseComment(settings, comment);\n\n  const outputText = [\n    genPrefix,\n    emptyLine,\n    parsedComment,\n    emptyLine,\n    ...parsedVarsLines,\n    parsedVarsLines.length > 0 ? emptyLine : '',\n    genPostfix,\n  ];\n\n  return (\n    <div className=\"card\">\n      <pre className=\"card-body\">\n        <code>\n          {outputText.filter(Boolean).map((l, k) => (\n            <div key={k}>{l}</div>\n          ))}\n        </code>\n      </pre>\n    </div>\n  );\n};\n\nOutput.propTypes = {\n  vars: PropTypes.arrayOf(PropTypes.string).isRequired,\n  comment: PropTypes.string.isRequired,\n  settings: PropTypes.shape({\n    filler: PropTypes.string,\n    lineLength: PropTypes.number,\n    showAdvancedSettings: PropTypes.bool,\n    lineStart: PropTypes.string,\n    lineEnd: PropTypes.string,\n    charEscaper: PropTypes.string,\n    variableConcatenateChar: PropTypes.string,\n    variableWrapperCodePrefix: PropTypes.string,\n    variableWrapperCodePostfix: PropTypes.string,\n    generalPrefix: PropTypes.string.isRequired,\n    generalPostfix: PropTypes.string.isRequired,\n  }),\n};\n\nconst mapStateToProps = state => ({\n  vars: state.vars.vars,\n  comment: state.comment,\n  settings: state.settings.values,\n});\n\nexport default connect(mapStateToProps)(Output);\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Presets from './components/Presets/Presets';\nimport Settings from './components/Settings/Settings';\nimport LogVars from './components/LogVars/LogVars';\nimport Comment from './components/Comment/Comment';\nimport Output from './components/Output/Output';\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>JS Development helpers</h1>\n      <Presets />\n      <Settings />\n      <LogVars />\n      <Comment />\n      <Output />\n    </Container>\n  );\n};\n\nexport default App;\n","import { consLogGenActions } from './LogVars.actions';\n\nconst varsInitialState = {\n  vars: [],\n  rawVars: '',\n};\n\nexport function vars(state = varsInitialState, action) {\n  switch (action.type) {\n    case consLogGenActions.RESET_VARS:\n      return {\n        ...varsInitialState,\n      };\n    case consLogGenActions.SET_VARS:\n      return {\n        vars: [...action.vars],\n        rawVars: action.rawVars,\n      };\n    default:\n      return state;\n  }\n}\n","import { CommentActions } from './Comment.actions';\n\nconst commentInitialState = 'your comment';\n\nexport function comment(state = commentInitialState, action) {\n  switch (action.type) {\n    case CommentActions.RESET_COMMENT:\n      return commentInitialState;\n    case CommentActions.SET_COMMENT:\n      return action.comment;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { settings } from './components/Settings/Settings.reducers';\nimport { vars } from './components/LogVars/LogVars.reducers';\nimport { comment } from './components/Comment/Comment.reducers';\n\nconst reducer = combineReducers({\n  settings,\n  vars,\n  comment,\n});\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport rootReducer from './rootReducer';\nimport { loadState, saveState } from './localStorage';\nimport './index.css';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","const LOCAL_STORAGE_ITEM = '__state';\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\n  } catch (err) {\n    console.log('Error was throw during store parsing: ', err);\n  }\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log('Error was throw during store reading: ', err);\n    return undefined;\n  }\n};\n"],"sourceRoot":""}