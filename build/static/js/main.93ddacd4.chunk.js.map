{"version":3,"sources":["components/Form/HorizontalInput.interface.ts","components/Form/HorizontalInput.component.tsx","components/Form/index.ts","components/Settings/Settings.actions.ts","components/Settings/Settings.interface.ts","components/Settings/Settings.container.ts","components/Settings/Settings.component.tsx","components/Settings/Settings.reducers.ts","components/Settings/Settings.selectors.ts","components/Settings/index.ts","components/LogVars/LogVars.actions.ts","components/Comment/Comment.actions.ts","components/LogVars/index.ts","components/LogVars/LogVars.selectors.ts","components/Comment/index.ts","components/Comment/Comment.selectors.ts","components/LogVars/LogVars.reducers.ts","components/Comment/Comment.reducers.ts","components/Output/helpers.ts","components/Output/Output.component.tsx","components/Output/Output.container.ts","components/LogVars/LogVars.container.ts","components/LogVars/LogVars.component.tsx","components/Comment/Comment.container.ts","components/Comment/Comment.component.tsx","components/Presets/Presets.container.ts","components/Presets/Presets.component.tsx","components/Output/index.ts","components/Presets/index.ts","App.tsx","store/rootReducer.ts","index.tsx","store/localStorage.js"],"names":["INPUT_TYPE","HorizontalInput","props","label","value","type","INPUT","onChange","errorMsg","rows","Form","Group","as","Row","className","Label","column","sm","Col","Control","e","preventDefault","target","isInvalid","TEXTAREA","Feedback","SettingsActions","loadSettingsPreset","preset","resetSettings","updateSettings","newSettingsValues","showAdvancedSettings","hideAdvancedSettings","PresetNames","Settings","connect","state","getShowAdvancedSettings","getSettingsValues","dispatch","showAdvanced","resetForm","hideAdvanced","Button","variant","size","onClick","filler","lineLenStr","lineLength","parseInt","isNaN","generalPrefix","generalPostfix","lineStart","lineEnd","charEscaper","variableConcatenateChar","prefix","variableWrapperCodePrefix","postfix","variableWrapperCodePostfix","settingsInitialState","currentPreset","DEFAULT","values","presetFullName","presetsValues","BROWSER","NODEJS","REACT_RENDER","CUSTOM","getPreset","presetName","settingsReducer","action","getSettings","settings","consLogGenActions","RESET_VARS","UPDATE_VARS","resetVars","getClosingBracket","closing","isClosingBracket","val","test","setVars","rawVars","separator","varsList","currentVar","bracketsQueue","bracketsError","char","length","push","lastOpenedBracket","pop","trim","vars","CommentActions","RESET_COMMENT","SET_COMMENT","resetComment","setComment","comment","getVars","getRawVars","getBracketsError","getComment","varsInitialState","varsReducer","commentReducer","wrapLineInPreAndPostFix","line","wrapStringWithEscaperChar","stringToWrap","transformStringToCenteredAndEscapedString","lineWithEscapedChars","gap","repeat","Math","floor","ceil","centerTextAndFillGapsAround","replace","RegExp","parseEmptyLine","emptyLine","copyToClipboard","text","a","navigator","clipboard","writeText","Output","useState","copiedFlag","setCopiedFlag","hideCopiedPopup","setHideCopiedPopup","genPrefix","genPostfix","parsedVarsLines","map","v","variable","parseVar","outputNonEmptyText","split","l","join","parseComment","filter","Boolean","setTimeout","k","key","LogVars","resetVariables","Comment","newValue","Presets","activePreset","changePreset","ButtonGroup","Object","App","Container","reducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","console","log","loadState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93ddacd4.chunk.js","sourcesContent":["export enum INPUT_TYPE {\r\n  INPUT = 'input',\r\n  TEXTAREA = 'textarea',\r\n}\r\n\r\nexport interface HorizontalInputProps {\r\n  label: string;\r\n  value: string;\r\n  type?: INPUT_TYPE;\r\n  errorMsg?: string;\r\n  rows?: number;\r\n  onChange: (val: string) => void;\r\n}\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { INPUT_TYPE, HorizontalInputProps } from './HorizontalInput.interface';\r\n\r\nexport const HorizontalInput: React.FC<HorizontalInputProps> = (props) => {\r\n  const {\r\n    label,\r\n    value,\r\n    type = INPUT_TYPE.INPUT,\r\n    onChange,\r\n    errorMsg,\r\n    rows,\r\n  } = props;\r\n\r\n  return (\r\n    <Form.Group as={Row} className=\"align-items-center\">\r\n      <Form.Label column sm=\"3\">\r\n        {label}\r\n      </Form.Label>\r\n      <Col sm=\"9\">\r\n        {type === INPUT_TYPE.INPUT && (\r\n          <Form.Control\r\n            onChange={(e: any) => {\r\n              e.preventDefault();\r\n              onChange(e?.target?.value ?? ('' as string));\r\n            }}\r\n            isInvalid={!!errorMsg}\r\n            value={value}\r\n          />\r\n        )}\r\n        {type === INPUT_TYPE.TEXTAREA && (\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            onChange={(e: any) => {\r\n              e.preventDefault();\r\n              onChange(e?.target?.value ?? ('' as string));\r\n            }}\r\n            isInvalid={!!errorMsg}\r\n            value={value}\r\n            rows={rows}\r\n          />\r\n        )}\r\n        {errorMsg && (\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errorMsg}\r\n          </Form.Control.Feedback>\r\n        )}\r\n      </Col>\r\n    </Form.Group>\r\n  );\r\n};\r\n","export * from './HorizontalInput.component';\r\nexport * from './HorizontalInput.interface';","import { PresetNames, SettingsValues } from \".\";\r\n\r\nexport const SettingsActions = {\r\n  LOAD_PRESET: 'LOAD_PRESET',\r\n  RESET_SETTINGS: 'RESET_SETTINGS',\r\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\r\n  SHOW_ADVANCED: 'SHOW_ADVANCED_SETTINGS',\r\n  HIDE_ADVANCED: 'HIDE_ADVANCED_SETTINGS',\r\n};\r\n\r\nexport function loadSettingsPreset(preset: PresetNames) {\r\n  return {\r\n    type: SettingsActions.LOAD_PRESET,\r\n    preset,\r\n  };\r\n}\r\n\r\nexport function resetSettings() {\r\n  return {\r\n    type: SettingsActions.RESET_SETTINGS,\r\n  };\r\n}\r\n\r\nexport function updateSettings(newSettingsValues: Partial<SettingsValues>) {\r\n  return {\r\n    type: SettingsActions.UPDATE_SETTINGS,\r\n    newSettingsValues,\r\n  };\r\n}\r\n\r\nexport function showAdvancedSettings() {\r\n  return {\r\n    type: SettingsActions.SHOW_ADVANCED,\r\n  };\r\n}\r\n\r\nexport function hideAdvancedSettings() {\r\n  return {\r\n    type: SettingsActions.HIDE_ADVANCED,\r\n  };\r\n}\r\n","export interface SettingsValues {\r\n  presetFullName: string;\r\n  filler: string;\r\n  lineLength: number;\r\n  lineStart: string;\r\n  lineEnd: string;\r\n  charEscaper: string;\r\n  variableConcatenateChar: string;\r\n  variableWrapperCodePrefix: string;\r\n  variableWrapperCodePostfix: string;\r\n  generalPrefix: string;\r\n  generalPostfix: string;\r\n}\r\n\r\nexport enum PresetNames {\r\n  BROWSER = 'BROWSER',\r\n  NODEJS = 'NODEJS',\r\n  REACT_RENDER = 'REACT_RENDER',\r\n  DEFAULT = 'DEFAULT',\r\n  CUSTOM = 'CUSTOM',\r\n}\r\n\r\nexport interface SettingsState {\r\n  currentPreset: PresetNames;\r\n  showAdvancedSettings: boolean;\r\n  values: SettingsValues;\r\n}\r\n\r\nexport interface SettingsStateProps extends SettingsValues {\r\n  showAdvancedSettings: SettingsState['showAdvancedSettings'];\r\n}\r\n\r\nexport interface SettingsDispatchProps {\r\n  onChange: (newSettingsValues: Partial<SettingsValues>) => void;\r\n  resetForm: () => void;\r\n  showAdvanced: () => void;\r\n  hideAdvanced: () => void;\r\n}\r\n\r\nexport interface SettingsComponentProps\r\n  extends SettingsStateProps,\r\n    SettingsDispatchProps {}\r\n","import { connect } from 'react-redux';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  SettingsStateProps,\r\n  getShowAdvancedSettings,\r\n  getSettingsValues,\r\n  SettingsDispatchProps,\r\n  updateSettings,\r\n  showAdvancedSettings,\r\n  resetSettings,\r\n  hideAdvancedSettings,\r\n  SettingsValues,\r\n} from '.';\r\nimport { SettingsComponent } from './Settings.component';\r\n\r\nconst mapStateToProps = (state: RootState): SettingsStateProps => ({\r\n  showAdvancedSettings: getShowAdvancedSettings(state),\r\n  ...getSettingsValues(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): SettingsDispatchProps => ({\r\n  onChange: (newSettingsValues: Partial<SettingsValues>) => {\r\n    dispatch(updateSettings(newSettingsValues));\r\n  },\r\n  showAdvanced: () => {\r\n    dispatch(showAdvancedSettings());\r\n  },\r\n  resetForm: () => {\r\n    dispatch(resetSettings());\r\n  },\r\n  hideAdvanced: () => {\r\n    dispatch(hideAdvancedSettings());\r\n  },\r\n});\r\n\r\nexport const Settings = connect(mapStateToProps, mapDispatchToProps)(SettingsComponent);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { SettingsValues, SettingsComponentProps } from './Settings.interface';\r\nimport { HorizontalInput } from '../Form';\r\n\r\nexport const SettingsComponent: React.FC<SettingsComponentProps> = (props) => {\r\n  const changeLineLength = (lineLenStr: string) => {\r\n    let lineLength = parseInt(lineLenStr);\r\n\r\n    if (isNaN(lineLength)) {\r\n      lineLength = 0;\r\n    }\r\n\r\n    props.onChange({\r\n      lineLength,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col>\r\n            <h3>Settings</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button\r\n              variant=\"outline-danger\"\r\n              size=\"sm\"\r\n              onClick={props.resetForm}\r\n            >\r\n              Reset settings\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <HorizontalInput\r\n          label=\"Char to use as filler\"\r\n          onChange={(filler: SettingsValues['filler']) => {\r\n            props.onChange({ filler });\r\n          }}\r\n          value={props.filler}\r\n        />\r\n\r\n        <HorizontalInput\r\n          label=\"Line length\"\r\n          onChange={changeLineLength}\r\n          value={'' + props.lineLength}\r\n        />\r\n\r\n        <Row>\r\n          <Col>\r\n            <h3>Advanced settings</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            {props.showAdvancedSettings ? (\r\n              <Button variant=\"primary\" size=\"sm\" onClick={props.hideAdvanced}>\r\n                Hide advanced settings\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"outline-primary\"\r\n                size=\"sm\"\r\n                onClick={props.showAdvanced}\r\n              >\r\n                Show advanced settings\r\n              </Button>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n\r\n        {props.showAdvancedSettings && (\r\n          <div>\r\n            <HorizontalInput\r\n              label=\"General prefix\"\r\n              onChange={(generalPrefix: SettingsValues['generalPrefix']) => {\r\n                props.onChange({ generalPrefix });\r\n              }}\r\n              value={props.generalPrefix}\r\n            />\r\n            <HorizontalInput\r\n              label=\"General postfix\"\r\n              onChange={(generalPostfix: SettingsValues['generalPostfix']) => {\r\n                props.onChange({ generalPostfix });\r\n              }}\r\n              value={props.generalPostfix}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Line start\"\r\n              onChange={(lineStart: SettingsValues['lineStart']) => {\r\n                props.onChange({ lineStart });\r\n              }}\r\n              value={props.lineStart}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Line end\"\r\n              onChange={(lineEnd: SettingsValues['lineEnd']) => {\r\n                props.onChange({ lineEnd });\r\n              }}\r\n              value={props.lineEnd}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Char escaper\"\r\n              onChange={(charEscaper: SettingsValues['charEscaper']) => {\r\n                props.onChange({ charEscaper });\r\n              }}\r\n              value={props.charEscaper}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Concatenate variable in log char\"\r\n              onChange={(\r\n                variableConcatenateChar: SettingsValues['variableConcatenateChar'],\r\n              ) => {\r\n                props.onChange({ variableConcatenateChar });\r\n              }}\r\n              value={props.variableConcatenateChar}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Variable wrapper prefix\"\r\n              onChange={(prefix: SettingsValues['variableWrapperCodePrefix']) => {\r\n                props.onChange({ variableWrapperCodePrefix: prefix });\r\n              }}\r\n              value={props.variableWrapperCodePrefix}\r\n            />\r\n            <HorizontalInput\r\n              label=\"Variable wrapper postfix\"\r\n              onChange={(postfix: SettingsValues['variableWrapperCodePostfix']) => {\r\n                props.onChange({ variableWrapperCodePostfix: postfix });\r\n              }}\r\n              value={props.variableWrapperCodePostfix}\r\n            />\r\n          </div>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import { SettingsActions } from './Settings.actions';\r\nimport { AnyAction } from 'redux';\r\nimport { PresetNames, SettingsValues, SettingsState } from './Settings.interface';\r\n\r\n\r\nconst settingsInitialState = {\r\n  currentPreset: PresetNames.DEFAULT,\r\n  showAdvancedSettings: false,\r\n  values: {\r\n    presetFullName: 'Default',\r\n    filler: '*',\r\n    lineLength: 60,\r\n    lineStart: 'console.log(',\r\n    lineEnd: ');',\r\n    charEscaper: \"'\",\r\n    variableConcatenateChar: ', ',\r\n    variableWrapperCodePrefix: 'JSON.stringify(',\r\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\r\n    generalPrefix: '',\r\n    generalPostfix: '',\r\n  },\r\n};\r\n\r\nconst presetsValues: {\r\n  [key in PresetNames]: Partial<SettingsValues>;\r\n} = {\r\n  BROWSER: {\r\n    presetFullName: 'Browser',\r\n    lineStart: 'console.log(',\r\n    lineEnd: ');',\r\n    charEscaper: \"'\",\r\n    variableConcatenateChar: ', ',\r\n    variableWrapperCodePrefix: 'JSON.stringify(',\r\n    variableWrapperCodePostfix: \", null, '\\\\t')\",\r\n    generalPrefix: '',\r\n    generalPostfix: '',\r\n  },\r\n  NODEJS: {\r\n    presetFullName: 'NodeJS',\r\n    lineStart: 'console.log(',\r\n    lineEnd: ');',\r\n    charEscaper: \"'\",\r\n    variableConcatenateChar: ', ',\r\n    variableWrapperCodePrefix: 'util.inspect(',\r\n    variableWrapperCodePostfix: ', false, 5)',\r\n    generalPrefix: \"const util = require('util');\",\r\n    generalPostfix: '',\r\n  },\r\n  REACT_RENDER: {\r\n    presetFullName: 'React render() log',\r\n    lineStart: '',\r\n    lineEnd: '<br />',\r\n    charEscaper: '',\r\n    variableConcatenateChar: '',\r\n    variableWrapperCodePrefix: '{JSON.stringify(',\r\n    variableWrapperCodePostfix: \", null, '\\\\t')}\",\r\n    generalPrefix: '<pre>',\r\n    generalPostfix: '</pre>',\r\n  },\r\n  DEFAULT: {\r\n    ...settingsInitialState.values,\r\n  },\r\n  CUSTOM: {\r\n    presetFullName: 'Custom',\r\n  },\r\n};\r\n\r\nexport function getPreset(presetName: PresetNames) {\r\n  return presetsValues[presetName];\r\n}\r\n\r\nexport function settingsReducer(\r\n  state = settingsInitialState,\r\n  action: AnyAction,\r\n): SettingsState {\r\n  switch (action.type) {\r\n    case SettingsActions.LOAD_PRESET:\r\n      return {\r\n        ...state,\r\n        currentPreset: action.preset,\r\n        values: {\r\n          ...state.values,\r\n          ...getPreset(action.preset),\r\n        },\r\n      };\r\n    case SettingsActions.RESET_SETTINGS:\r\n      return {\r\n        ...settingsInitialState,\r\n      };\r\n    case SettingsActions.UPDATE_SETTINGS:\r\n      return {\r\n        ...state,\r\n        currentPreset: PresetNames.CUSTOM,\r\n        values: {\r\n          ...state.values,\r\n          ...getPreset(PresetNames.CUSTOM),\r\n          ...action.newSettingsValues,\r\n        },\r\n      };\r\n    case SettingsActions.SHOW_ADVANCED:\r\n      return {\r\n        ...state,\r\n        showAdvancedSettings: true,\r\n      };\r\n    case SettingsActions.HIDE_ADVANCED:\r\n      return {\r\n        ...state,\r\n        showAdvancedSettings: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { RootState } from '../../store/rootReducer';\r\n\r\nexport const getSettings = (state: RootState) => state.settings;\r\n\r\nexport const getShowAdvancedSettings = (state: RootState) =>\r\n  getSettings(state).showAdvancedSettings;\r\n\r\nexport const getSettingsValues = (state: RootState) =>\r\n  getSettings(state).values;\r\n","export * from './Settings.actions';\r\nexport * from './Settings.container';\r\nexport * from './Settings.interface';\r\nexport * from './Settings.reducers';\r\nexport * from './Settings.selectors';","import { VarsState } from './LogVars.reducers';\r\n\r\nexport const consLogGenActions = {\r\n  RESET_VARS: 'RESET_VARS',\r\n  UPDATE_VARS: 'UPDATE_VARS',\r\n};\r\n\r\nexport function resetVars() {\r\n  return {\r\n    type: consLogGenActions.RESET_VARS,\r\n  };\r\n}\r\n\r\ntype OpeningBrackets = '(' | '{' | '[';\r\ntype ClosingBrackets = ')' | '}' | ']';\r\n\r\nconst getClosingBracket = (\r\n  closing: OpeningBrackets,\r\n): ClosingBrackets | undefined => {\r\n  switch (closing) {\r\n    case '(':\r\n      return ')' as ClosingBrackets;\r\n    case '{':\r\n      return '}' as ClosingBrackets;\r\n    case '[':\r\n      return ']' as ClosingBrackets;\r\n  }\r\n};\r\n\r\nconst isOpeningBracket = (val: any): val is OpeningBrackets => {\r\n  const openingBrackets: RegExp = /[({[]/;\r\n  return openingBrackets.test(val);\r\n};\r\n\r\nconst isClosingBracket = (val: any): val is ClosingBrackets => {\r\n  const closingBrackets: RegExp = /[)}\\]]/;\r\n  return closingBrackets.test(val);\r\n};\r\n\r\nexport function setVars(rawVars: VarsState['rawVars']) {\r\n  const separator: RegExp = /[ ,;]/;\r\n  const varsList: string[] = [];\r\n\r\n  let currentVar: string = '';\r\n  let bracketsQueue: OpeningBrackets[] = [];\r\n  let bracketsError: string = '';\r\n\r\n  for (let char of rawVars) {\r\n    if (bracketsError.length > 0) {\r\n      break;\r\n    }\r\n\r\n    // current char is not a separator OR any bracket is not opened\r\n    if (!separator.test(char) || bracketsQueue.length > 0) {\r\n      currentVar += char;\r\n\r\n      if (isOpeningBracket(char)) {\r\n        bracketsQueue.push(char);\r\n      }\r\n\r\n      if (isClosingBracket(char)) {\r\n        const lastOpenedBracket = bracketsQueue[bracketsQueue.length - 1];\r\n\r\n        if (\r\n          bracketsQueue.length &&\r\n          char === getClosingBracket(lastOpenedBracket)\r\n        ) {\r\n          bracketsQueue.pop();\r\n        } else {\r\n          bracketsError = `Closing bracket \"${char}\" does not match`;\r\n\r\n          if (lastOpenedBracket) {\r\n            bracketsError += ` last opened \"${lastOpenedBracket}\"`;\r\n          } else {\r\n            bracketsError += ` any opening bracket`;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // if char IS empty\r\n      // AND currentVar str is not empty, then dump it to varsList and reset to empty string\r\n      if (currentVar.trim()) {\r\n        varsList.push(currentVar);\r\n        currentVar = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  // if anything is still left in currentVar, then push it to varsList\r\n  if (currentVar.trim() && !bracketsError) {\r\n    varsList.push(currentVar);\r\n  }\r\n\r\n  if (bracketsQueue.length && !bracketsError) {\r\n    bracketsError = `Last unclosed bracket \"${\r\n      bracketsQueue[bracketsQueue.length - 1]\r\n    }\" does not have closing bracket pair`;\r\n  }\r\n\r\n  return {\r\n    type: consLogGenActions.UPDATE_VARS,\r\n    rawVars,\r\n    vars: varsList,\r\n    bracketsError,\r\n  };\r\n}\r\n","import { CommentState } from './Comment.reducers';\r\n\r\nexport const CommentActions = {\r\n  RESET_COMMENT: 'RESET_COMMENT',\r\n  SET_COMMENT: 'UPDATE_COMMENT',\r\n};\r\n\r\nexport function resetComment() {\r\n  return {\r\n    type: CommentActions.RESET_COMMENT,\r\n  };\r\n}\r\nexport function setComment(comment: CommentState) {\r\n  return {\r\n    type: CommentActions.SET_COMMENT,\r\n    comment,\r\n  };\r\n}\r\n","export * from './LogVars.container';\r\nexport * from './LogVars.actions';\r\nexport * from './LogVars.interface';\r\nexport * from './LogVars.reducers';\r\nexport * from './LogVars.selectors';","import { RootState } from '../../store/rootReducer';\r\n\r\nexport const getVars = (state: RootState) => state.vars.vars;\r\n\r\nexport const getRawVars = (state: RootState) => state.vars.rawVars;\r\n\r\nexport const getBracketsError = (state: RootState) => state.vars.bracketsError;\r\n","export * from './Comment.container';\r\nexport * from './Comment.actions';\r\nexport * from './Comment.interface';\r\nexport * from './Comment.reducers';\r\nexport * from './Comment.selectors';","import { RootState } from '../../store/rootReducer';\r\n\r\nexport const getComment = (state: RootState) => state.comment;\r\n","import { consLogGenActions } from './LogVars.actions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst varsInitialState: VarsState = {\r\n  vars: [],\r\n  rawVars: '',\r\n  bracketsError: '',\r\n};\r\n\r\nexport interface VarsState {\r\n  vars: string[];\r\n  rawVars: string;\r\n  bracketsError: string;\r\n}\r\n\r\nexport function varsReducer(state = varsInitialState, action: AnyAction): VarsState {\r\n  switch (action.type) {\r\n    case consLogGenActions.RESET_VARS:\r\n      return {\r\n        ...varsInitialState,\r\n      };\r\n    case consLogGenActions.UPDATE_VARS:\r\n      return {\r\n        ...state,\r\n        vars: [...action.vars],\r\n        rawVars: action.rawVars,\r\n        bracketsError: action.bracketsError,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { CommentActions } from './Comment.actions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst commentInitialState = 'your comment';\r\n\r\nexport type CommentState = string;\r\n\r\nexport function commentReducer(state = commentInitialState, action: AnyAction) {\r\n  switch (action.type) {\r\n    case CommentActions.RESET_COMMENT:\r\n      return commentInitialState;\r\n    case CommentActions.SET_COMMENT:\r\n      return action.comment;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SettingsValues } from '../Settings/Settings.interface';\r\n\r\nfunction wrapLineInPreAndPostFix(settings: SettingsValues, line: string) {\r\n  return `${settings.lineStart}${line}${settings.lineEnd}`;\r\n}\r\n\r\nfunction wrapStringWithEscaperChar(settings: SettingsValues, stringToWrap: string) {\r\n  return settings.charEscaper + stringToWrap + settings.charEscaper;\r\n}\r\n\r\nfunction centerTextAndFillGapsAround(settings: SettingsValues, line: string) {\r\n  const targetLen = settings.lineLength;\r\n  const currentLen = line.length;\r\n\r\n  const gap = targetLen - currentLen - 2; // minus 2 empty spaces around \"line\"\r\n\r\n  if (gap <= 0) {\r\n    return line;\r\n  }\r\n\r\n  const filledLine =\r\n    settings.filler.repeat(Math.floor(gap / 2)) +\r\n    ' ' +\r\n    line +\r\n    ' ' +\r\n    settings.filler.repeat(Math.ceil(gap / 2));\r\n\r\n  return filledLine;\r\n}\r\n\r\nfunction transformStringToCenteredAndEscapedString(\r\n  settings: SettingsValues,\r\n  line: string,\r\n) {\r\n  const filledLine = centerTextAndFillGapsAround(settings, line);\r\n\r\n  let lineWithEscapedChars = filledLine;\r\n\r\n  if (settings.charEscaper) {\r\n    lineWithEscapedChars = lineWithEscapedChars.replace(\r\n      new RegExp(settings.charEscaper, 'ig'),\r\n      `\\\\${settings.charEscaper}`,\r\n    );\r\n  }\r\n\r\n  return wrapLineInPreAndPostFix(\r\n    settings,\r\n    wrapStringWithEscaperChar(settings, lineWithEscapedChars),\r\n  );\r\n}\r\n\r\nexport function parseEmptyLine(settings: SettingsValues) {\r\n  const emptyLine = wrapStringWithEscaperChar(\r\n    settings,\r\n    settings.filler.repeat(settings.lineLength),\r\n  );\r\n\r\n  return wrapLineInPreAndPostFix(settings, emptyLine);\r\n}\r\n\r\nexport function parseComment(settings: SettingsValues, comment: string) {\r\n  return comment\r\n    .split('\\n')\r\n    .map((l) => l.trim())\r\n    .map((l) => {\r\n      if (l) return transformStringToCenteredAndEscapedString(settings, l);\r\n      return parseEmptyLine(settings);\r\n    })\r\n    .join('\\n');\r\n}\r\n\r\nexport function parseVar(settings: SettingsValues, variable: string) {\r\n  return wrapLineInPreAndPostFix(\r\n    settings,\r\n    wrapStringWithEscaperChar(settings, `${settings.filler} ${variable}: `) +\r\n      `${settings.variableConcatenateChar}` +\r\n      `${settings.variableWrapperCodePrefix}${variable}${settings.variableWrapperCodePostfix}`,\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { parseComment, parseVar, parseEmptyLine } from './helpers';\r\nimport './Output.css';\r\nimport { OutputComponentProps } from './Output.interface';\r\n\r\nasync function copyToClipboard(text: string): Promise<void> {\r\n  navigator.clipboard.writeText(text);\r\n}\r\n\r\nexport const OutputComponent: React.FC<OutputComponentProps> = ({\r\n  vars,\r\n  comment,\r\n  settings,\r\n}) => {\r\n  const [copiedFlag, setCopiedFlag] = useState<Boolean>(false);\r\n  const [hideCopiedPopup, setHideCopiedPopup] = useState<Boolean>(false);\r\n\r\n  const genPrefix = settings.generalPrefix;\r\n  const genPostfix = settings.generalPostfix;\r\n  const emptyLine = parseEmptyLine(settings);\r\n  const parsedVarsLines = vars.map((v) => parseVar(settings, v));\r\n  const parsedComment = parseComment(settings, comment);\r\n\r\n  const outputNonEmptyText = [\r\n    genPrefix,\r\n    emptyLine,\r\n    parsedComment,\r\n    emptyLine,\r\n    ...parsedVarsLines,\r\n    parsedVarsLines.length > 0 ? emptyLine : '',\r\n    genPostfix,\r\n  ].filter(Boolean);\r\n\r\n  function addCopiedPopup() {\r\n    setHideCopiedPopup(false);\r\n    setCopiedFlag(true);\r\n\r\n    setTimeout(() => {\r\n      setHideCopiedPopup(true);\r\n    }, 1000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"output card\">\r\n      <pre\r\n        className={`card-body ${copiedFlag ? 'output__copied' : ''} ${\r\n          hideCopiedPopup ? 'hide-popup' : ''\r\n        }`}\r\n      >\r\n        <code\r\n          onClick={async () => {\r\n            await copyToClipboard(outputNonEmptyText.join('\\n'));\r\n            addCopiedPopup();\r\n          }}\r\n        >\r\n          {outputNonEmptyText.map((l, k) => (\r\n            <div key={k}>{l}</div>\r\n          ))}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { OutputComponent } from './Output.component';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { getVars } from '../LogVars';\r\nimport { getComment } from '../Comment';\r\nimport { getSettingsValues } from '../Settings';\r\nimport { OutputComponentStateProps } from './Output.interface';\r\n\r\nconst mapStateToProps = (state: RootState): OutputComponentStateProps => ({\r\n  vars: getVars(state),\r\n  comment: getComment(state),\r\n  settings: getSettingsValues(state),\r\n});\r\n\r\nexport const Output = connect(mapStateToProps)(OutputComponent);\r\n","import { connect } from 'react-redux';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { Dispatch } from 'redux';\r\nimport { VarsState } from './LogVars.reducers';\r\nimport { LogVarsComponent } from './LogVars.component';\r\nimport { setVars, resetVars } from './LogVars.actions';\r\nimport { getBracketsError, getRawVars, getVars } from './LogVars.selectors';\r\nimport { LogVarsStateProps, LogVarsDispatchProps } from './LogVars.interface';\r\n\r\nconst mapStateToProps = (state: RootState): LogVarsStateProps => ({\r\n  vars: getVars(state),\r\n  rawVars: getRawVars(state),\r\n  bracketsError: getBracketsError(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): LogVarsDispatchProps => ({\r\n  onChange: (vars: VarsState['rawVars']) => {\r\n    dispatch(setVars(vars));\r\n  },\r\n  resetVariables: () => {\r\n    dispatch(resetVars());\r\n  },\r\n});\r\n\r\nexport const LogVars = connect(mapStateToProps, mapDispatchToProps)(LogVarsComponent);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { LogVarsComponentProps } from './LogVars.interface';\r\nimport { VarsState } from './LogVars.reducers';\r\nimport { HorizontalInput } from '../Form';\r\n\r\nexport const LogVarsComponent: React.FC<LogVarsComponentProps> = (props) => {\r\n  const { resetVariables, onChange, rawVars, bracketsError } = props;\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col>\r\n            <h3>Variables</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button\r\n              variant=\"outline-danger\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                resetVariables();\r\n              }}\r\n            >\r\n              Reset variables\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <HorizontalInput\r\n          label=\"Variable names to log\"\r\n          onChange={(rawVars: VarsState['rawVars']) => {\r\n            onChange(rawVars);\r\n          }}\r\n          value={rawVars}\r\n          errorMsg={bracketsError}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { CommentState } from './Comment.reducers';\r\nimport { CommentComponent } from './Comment.component';\r\nimport { setComment, resetComment } from './Comment.actions';\r\nimport { getComment } from './Comment.selectors';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  comment: getComment(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  onChange: (comment: CommentState) => {\r\n    dispatch(setComment(comment));\r\n  },\r\n  resetComment: () => {\r\n    dispatch(resetComment());\r\n  },\r\n});\r\n\r\nexport const Comment = connect(mapStateToProps, mapDispatchToProps)(CommentComponent);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { CommentComponentProps } from './Comment.interface';\r\nimport { HorizontalInput, INPUT_TYPE } from '../Form/';\r\n\r\nexport const CommentComponent: React.FC<CommentComponentProps> = (props) => {\r\n  const { resetComment, onChange, comment } = props;\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Row>\r\n          <Col>\r\n            <h3>Comment</h3>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button\r\n              variant=\"outline-danger\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                resetComment();\r\n              }}\r\n            >\r\n              Reset comment\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <HorizontalInput\r\n          label=\"The comment\"\r\n          type={INPUT_TYPE.TEXTAREA}\r\n          onChange={(newValue: string) => onChange(newValue)}\r\n          value={comment}\r\n          rows={7}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import { connect } from 'react-redux';\r\nimport { loadSettingsPreset, PresetNames } from '../Settings';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { Dispatch } from 'redux';\r\nimport { PresetsComponent } from './Presets.component';\r\nimport { PresetsStateProps, PresetsDispatchProps } from '.';\r\n\r\nconst mapStateToProps = (state: RootState): PresetsStateProps => ({\r\n  activePreset: state.settings.currentPreset,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): PresetsDispatchProps => ({\r\n  changePreset: (preset: PresetNames) => {\r\n    dispatch(loadSettingsPreset(preset));\r\n  },\r\n});\r\n\r\nexport const Presets = connect(mapStateToProps, mapDispatchToProps)(PresetsComponent);\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { PresetsComponentProps } from './Presets.interface';\r\nimport { PresetNames, getPreset } from '../Settings';\r\n\r\nexport const PresetsComponent: React.FC<PresetsComponentProps> = (props) => (\r\n  <Row>\r\n    <Col className=\"d-flex flex-column\">\r\n      <h3>Presets</h3>\r\n      <ButtonGroup size=\"sm\" className=\"mt-3\">\r\n        {Object.values(PresetNames).map((key) => (\r\n          <Button\r\n            key={key}\r\n            variant={props.activePreset === key ? 'primary' : 'outline-primary'}\r\n            onClick={() => props.changePreset(key)}\r\n          >\r\n            {getPreset(key).presetFullName}\r\n          </Button>\r\n        ))}\r\n      </ButtonGroup>\r\n      <br />\r\n    </Col>\r\n  </Row>\r\n);\r\n","export * from './Output.container';\r\nexport * from './Output.interface';","export * from './Presets.container';\r\nexport * from './Presets.interface';","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport { Settings } from './components/Settings';\r\nimport { LogVars } from './components/LogVars';\r\nimport { Comment } from './components/Comment';\r\nimport { Output } from './components/Output';\r\nimport { Presets } from './components/Presets';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Container>\r\n      <h1>JS Development helpers</h1>\r\n      <Presets />\r\n      <Settings />\r\n      <LogVars />\r\n      <Comment />\r\n      <Output />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { settingsReducer, SettingsState } from '../components/Settings';\r\nimport { varsReducer, VarsState } from '../components/LogVars';\r\nimport { commentReducer, CommentState } from '../components/Comment';\r\n\r\nconst reducer = combineReducers({\r\n  settings: settingsReducer,\r\n  vars: varsReducer,\r\n  comment: commentReducer,\r\n});\r\n\r\nexport interface RootState {\r\n  settings: SettingsState;\r\n  vars: VarsState;\r\n  comment: CommentState;\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport rootReducer from './store/rootReducer';\r\nimport { loadState, saveState } from './store/localStorage';\r\nimport './index.css';\r\n\r\nconst persistedState = loadState();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n","const LOCAL_STORAGE_ITEM = '__state';\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(LOCAL_STORAGE_ITEM, serializedState);\r\n  } catch (err) {\r\n    console.log('Error was throw during store parsing: ', err);\r\n  }\r\n};\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(LOCAL_STORAGE_ITEM);\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    console.log('Error was throw during store reading: ', err);\r\n    return undefined;\r\n  }\r\n};\r\n"],"sourceRoot":""}